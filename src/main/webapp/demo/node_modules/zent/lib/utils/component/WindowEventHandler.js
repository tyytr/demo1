'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var WindowEventHandler = function (_ref) {
  (0, _inherits3['default'])(WindowEventHandler, _ref);

  function WindowEventHandler() {
    (0, _classCallCheck3['default'])(this, WindowEventHandler);
    return (0, _possibleConstructorReturn3['default'])(this, (WindowEventHandler.__proto__ || Object.getPrototypeOf(WindowEventHandler)).apply(this, arguments));
  }

  (0, _createClass3['default'])(WindowEventHandler, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          eventName = _props.eventName,
          callback = _props.callback,
          useCapture = _props.useCapture;

      window.addEventListener(eventName, callback, useCapture);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _props2 = this.props,
          eventName = _props2.eventName,
          callback = _props2.callback,
          useCapture = _props2.useCapture;

      window.removeEventListener(eventName, callback, useCapture);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return WindowEventHandler;
}(_react.PureComponent || _react.Component);

WindowEventHandler.propTypes = {
  eventName: _propTypes2['default'].string.isRequired,
  callback: _propTypes2['default'].func.isRequired,
  useCapture: _propTypes2['default'].bool
};
WindowEventHandler.defaultProps = {
  useCapture: false
};
exports['default'] = WindowEventHandler;