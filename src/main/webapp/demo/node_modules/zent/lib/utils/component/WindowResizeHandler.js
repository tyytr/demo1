'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getViewportSize = require('../dom/getViewportSize');

var _getViewportSize2 = _interopRequireDefault(_getViewportSize);

var _WindowEventHandler = require('./WindowEventHandler');

var _WindowEventHandler2 = _interopRequireDefault(_WindowEventHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Handles window.resize event.
 *
 * The event handler got a second parameter: {deltaX, deltaY}.
 * The resize event handler should be throttled since resize events can fire at a high rate.
 */
/* eslint-disable no-underscore-dangle */

var WindowResizeHandler = function (_ref) {
  (0, _inherits3['default'])(WindowResizeHandler, _ref);

  function WindowResizeHandler() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, WindowResizeHandler);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref2 = WindowResizeHandler.__proto__ || Object.getPrototypeOf(WindowResizeHandler)).call.apply(_ref2, [this].concat(args))), _this), _this.onResize = function (evt) {
      var viewportSize = (0, _getViewportSize2['default'])();
      var prevViewportSize = _this._prevViewportSize;
      var delta = {
        deltaX: viewportSize.width - prevViewportSize.width,
        deltaY: viewportSize.height - prevViewportSize.height
      };

      if (delta.deltaX === 0 && delta.deltaY === 0) {
        return;
      }

      _this.props.onResize(evt, delta);
      _this._prevViewportSize = viewportSize;
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  (0, _createClass3['default'])(WindowResizeHandler, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._prevViewportSize = (0, _getViewportSize2['default'])();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement(_WindowEventHandler2['default'], { eventName: 'resize', callback: this.onResize });
    }
  }]);
  return WindowResizeHandler;
}(_react.PureComponent || _react.Component);

WindowResizeHandler.propTypes = {
  onResize: _propTypes2['default'].func.isRequired
};
exports['default'] = WindowResizeHandler;