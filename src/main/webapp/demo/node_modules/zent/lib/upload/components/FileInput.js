'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _notify = require('../../notify');

var _notify2 = _interopRequireDefault(_notify);

var _toArray = require('lodash/toArray');

var _toArray2 = _interopRequireDefault(_toArray);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _isPromise = require('../../utils/isPromise');

var _isPromise2 = _interopRequireDefault(_isPromise);

var _utils = require('../utils');

var _fileType = require('../utils/file-type');

var _fileType2 = _interopRequireDefault(_fileType);

var _UploadLocal = require('./UploadLocal');

var _UploadLocal2 = _interopRequireDefault(_UploadLocal);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var FileInput = function (_ref) {
  (0, _inherits3['default'])(FileInput, _ref);

  function FileInput(props) {
    (0, _classCallCheck3['default'])(this, FileInput);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call(this, props));

    _initialiseProps.call(_this);

    var accept = props.accept,
        type = props.type;
    // 根据type设置accept默认值

    if (!accept) {
      accept = _constants.DEFAULT_ACCEPT[type];
    }

    _this.state = {
      accept: accept
    };
    return _this;
  }

  (0, _createClass3['default'])(FileInput, [{
    key: 'addFile',
    value: function addFile(file, index) {
      var _this2 = this;

      var fileReader = new FileReader();
      var _props = this.props,
          silent = _props.silent,
          type = _props.type,
          initIndex = _props.initIndex;
      var accept = this.state.accept;

      var localFiles = [];

      fileReader.onload = function (e) {
        var mimeType = (0, _fileType2['default'])((0, _utils.base64ToArrayBuffer)(e.target.result.replace(/^(.*?)base64,/, '')));
        if (accept && (!mimeType || accept.indexOf(mimeType.mime) > -1)) {
          localFiles.push({
            src: e.target.result,
            file: file,
            __uid: initIndex + index
          });
        } else {
          !silent && _notify2['default'].error('\u5DF2\u7ECF\u81EA\u52A8\u8FC7\u6EE4\u7C7B\u578B\u4E0D\u6B63\u786E\u7684' + (type === 'voice' ? '语音' : '图片') + '\u6587\u4EF6');
        }
        _this2.onFileChange(localFiles);
      };

      fileReader.readAsDataURL(file);
    }
  }, {
    key: 'render',
    value: function render() {
      var maxAmount = this.props.maxAmount;
      var accept = this.state.accept;


      return _react2['default'].createElement('input', {
        type: 'file',
        placeholder: '\u6DFB\u52A0 +',
        multiple: maxAmount !== 1,
        accept: accept,
        onChange: this.processFiles
      });
    }
  }]);
  return FileInput;
}(_react.PureComponent || _react.Component); /**
                                              * 上传图片输入框
                                              */

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.onFileChange = function (localFiles) {
    var onChange = _this3.props.onChange;

    if (onChange) {
      onChange(localFiles);
    } else {
      (0, _UploadLocal2['default'])(_this3.props, {
        localFiles: localFiles
      });
    }
  };

  this.processFiles = function (evt) {
    var files = (0, _toArray2['default'])(evt.target.files);
    var _props2 = _this3.props,
        filterFiles = _props2.filterFiles,
        onError = _props2.onError;


    var filterResult = filterFiles(files);
    if ((0, _isPromise2['default'])(filterResult)) {
      filterResult.then(_this3.iteratorFiles, onError);
    } else {
      files = filterResult;
      _this3.iteratorFiles(files);
    }

    // 清除当前的值，否则选同一张图片不会触发事件
    evt.target.value = null;
  };

  this.iteratorFiles = function (files) {
    var _props3 = _this3.props,
        type = _props3.type,
        maxSize = _props3.maxSize,
        silent = _props3.silent,
        maxAmount = _props3.maxAmount;

    var typeName = type === 'voice' ? '语音' : '图片';

    (0, _forEach2['default'])(files, function (file, index) {
      if (maxAmount && index >= maxAmount) {
        !silent && _notify2['default'].error('\u5DF2\u7ECF\u81EA\u52A8\u8FC7\u6EE4\u8D85\u8FC7' + maxAmount + '\u5F20\u7684' + typeName + '\u6587\u4EF6');
        return false;
      }
      if (!maxSize || file.size <= maxSize) {
        _this3.addFile(file, index);
      } else {
        !silent && _notify2['default'].error('\u5DF2\u7ECF\u81EA\u52A8\u8FC7\u6EE4\u5927\u4E8E' + (0, _utils.formatFileSize)(maxSize) + '\u7684' + typeName + '\u6587\u4EF6');
      }
    });
  };
};

exports['default'] = FileInput;