'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _button = require('../../button');

var _button2 = _interopRequireDefault(_button);

var _input = require('../../input');

var _input2 = _interopRequireDefault(_input);

var _FileInput = require('./FileInput');

var _FileInput2 = _interopRequireDefault(_FileInput);

var _UploadLocal = require('./UploadLocal');

var _UploadLocal2 = _interopRequireDefault(_UploadLocal);

var _UploadImageItem = require('./UploadImageItem');

var _UploadImageItem2 = _interopRequireDefault(_UploadImageItem);

var _sortable = require('../utils/sortable');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * 上传图片弹框
 */

var BUTTON_LOADING_TEXT = '提取中...';
var BUTTON_TEXT = '提取';

var UploadPopup = function (_Component) {
  (0, _inherits3['default'])(UploadPopup, _Component);

  function UploadPopup(props) {
    (0, _classCallCheck3['default'])(this, UploadPopup);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (UploadPopup.__proto__ || Object.getPrototypeOf(UploadPopup)).call(this, props));

    _this.handleMove = function (fromIndex, toIndex) {
      var localFiles = _this.state.localFiles;

      localFiles = (0, _sortable.swapArray)(localFiles, fromIndex, toIndex);
      _this.setState({
        localFiles: localFiles.map(function (item, index) {
          // 拖拽移动以后重建索引
          item.__uid = index;
          return item;
        })
      });
    };

    _this.handleDelete = function (index) {
      var localFiles = _this.state.localFiles;

      localFiles.splice(index, 1);
      _this.setState({
        localFiles: localFiles
      });
    };

    _this.handleChange = function (files) {
      var localFiles = _this.state.localFiles;

      localFiles = localFiles.concat(files);
      // 根据索引进行排序，防止读取文件导致顺序错乱
      localFiles.sort(function (a, b) {
        return a.__uid > b.__uid ? 1 : -1;
      });
      _this.setState({
        localFiles: localFiles
      });
    };

    _this.onListRefChange = function (list) {
      if (list) {
        _this.sortable = (0, _sortable.initSortable)(list, _this.handleMove);
      } else {
        _this.sortable && _this.sortable.destroy();
      }
    };

    _this.state = {
      networkImage: props.networkImage,
      networkUploading: props.networkUploading,
      localUploading: props.localUploading,
      buttonText: props.buttonText,
      localFiles: []
    };
    _this.networkUrl = '';
    _this.confirmNetworkUrl = _this.confirmNetworkUrl.bind(_this);
    _this.networkUrlChanged = _this.networkUrlChanged.bind(_this);
    _this.uploadLocalImages = _this.uploadLocalImages.bind(_this);
    _this.fileProgressHandler = _this.fileProgressHandler.bind(_this);
    return _this;
  }

  /**
   * 网络图片渲染
   */


  (0, _createClass3['default'])(UploadPopup, [{
    key: 'renderNetworkRegion',
    value: function renderNetworkRegion(props) {
      var prefix = props.prefix;
      var _state = this.state,
          networkImage = _state.networkImage,
          networkUploading = _state.networkUploading,
          buttonText = _state.buttonText;

      return _react2['default'].createElement(
        'div',
        { className: prefix + '-network-image-region' },
        _react2['default'].createElement(
          'div',
          { className: prefix + '-title' },
          '\u7F51\u7EDC\u56FE\u7247\uFF1A'
        ),
        _react2['default'].createElement(
          'div',
          { className: prefix + '-content' },
          _react2['default'].createElement(
            'div',
            { className: prefix + '-input-append' },
            _react2['default'].createElement(_input2['default'], {
              type: 'text',
              placeholder: '\u8BF7\u6DFB\u52A0\u7F51\u7EDC\u56FE\u7247\u5730\u5740',
              onChange: this.networkUrlChanged
            })
          ),
          _react2['default'].createElement(
            _button2['default'],
            {
              type: 'primary',
              outline: true,
              loading: networkUploading,
              onClick: this.confirmNetworkUrl
            },
            buttonText
          ),
          _react2['default'].createElement(
            'div',
            { className: prefix + '-image-preview' },
            _react2['default'].createElement('img', { src: networkImage.attachment_url, alt: '', role: 'presentation' })
          )
        )
      );
    }

    // 上传图片列表

  }, {
    key: 'renderLocalImage',
    value: function renderLocalImage(item, index) {
      return _react2['default'].createElement(_UploadImageItem2['default'], (0, _extends3['default'])({
        key: index
      }, item, {
        index: index,
        onDelete: this.handleDelete
      }));
    }

    // 上传语音列表

  }, {
    key: 'renderLocalVoice',
    value: function renderLocalVoice(item, index) {
      return _react2['default'].createElement(
        'li',
        { key: index, className: 'upload-local-voice-item voice-item' },
        _react2['default'].createElement('div', { className: 'voice-icon' }),
        _react2['default'].createElement(
          'div',
          { className: 'voice-name' },
          item.file.name
        ),
        _react2['default'].createElement(
          'div',
          { className: 'voice-createtime' },
          (0, _utils.formatFileSize)(item.file.size)
        ),
        _react2['default'].createElement(
          'span',
          {
            className: 'close-modal small',
            onClick: this.handleDelete.bind(this, index)
          },
          '\xD7'
        ),
        item.progress ? _react2['default'].createElement(
          'div',
          { className: 'voice-progress' },
          item.progress.toFixed(1) + '%'
        ) : ''
      );
    }

    /**
     * 本地上传图片、语音
     */

  }, {
    key: 'renderLocalUploadRegion',
    value: function renderLocalUploadRegion(props) {
      var _this2 = this;

      var prefix = props.prefix,
          accept = props.accept,
          options = props.options;
      var localFiles = this.state.localFiles;
      // 记录最后一项的索引

      var lastIndex = 0;
      var filesLength = localFiles.length;
      if (filesLength > 0) {
        // 保证新添加的都是在旧添加的文件后面
        lastIndex = localFiles[filesLength - 1].__uid + 1;
      }
      return _react2['default'].createElement(
        'div',
        { className: prefix + '-local-attachment-region' },
        _react2['default'].createElement(
          'div',
          { className: prefix + '-title' },
          '\u672C\u5730',
          options.type === 'voice' ? '语音' : '图片',
          '\uFF1A'
        ),
        _react2['default'].createElement(
          'div',
          { className: prefix + '-content' },
          _react2['default'].createElement(
            'ul',
            {
              ref: this.onListRefChange,
              className: options.type + '-list upload-local-' + options.type + '-list'
            },
            localFiles.map(function (item, index) {
              return options.type === 'voice' ? _this2.renderLocalVoice(item, index) : _this2.renderLocalImage(item, index);
            })
          ),
          !options.maxAmount || localFiles.length < options.maxAmount ? _react2['default'].createElement(
            'div',
            { className: prefix + '-add-local-image-button pull-left' },
            '+',
            _react2['default'].createElement(_FileInput2['default'], (0, _extends3['default'])({}, props.options, {
              accept: accept,
              initIndex: lastIndex,
              onChange: this.handleChange
            }))
          ) : '',
          _react2['default'].createElement(
            'div',
            { className: prefix + '-local-tips c-gray' },
            '\u4EC5\u652F\u6301',
            accept.replace(/image\/?|audio\/?/g, '').replace(/, ?/g, '、') + ' ' + accept.split(',').length,
            '\u79CD\u683C\u5F0F, \u5927\u5C0F\u4E0D\u8D85\u8FC7',
            (0, _utils.formatFileSize)(options.maxSize)
          )
        )
      );
    }
  }, {
    key: 'renderFooterRegion',
    value: function renderFooterRegion() {
      var _state2 = this.state,
          localUploading = _state2.localUploading,
          localFiles = _state2.localFiles;

      return _react2['default'].createElement(
        'div',
        { className: 'text-center' },
        _react2['default'].createElement(
          _button2['default'],
          {
            type: 'primary',
            size: 'large',
            disabled: localFiles.length === 0,
            loading: localUploading,
            onClick: this.uploadLocalImages
          },
          '\u786E\u5B9A'
        )
      );
    }
  }, {
    key: 'uploadLocalImages',
    value: function uploadLocalImages() {
      var _this3 = this;

      var _props = this.props,
          options = _props.options,
          showUploadPopup = _props.showUploadPopup;
      var localFiles = this.state.localFiles;

      this.setState({
        localUploading: true
      });
      (0, _UploadLocal2['default'])(options, {
        localFiles: localFiles,
        onProgress: this.fileProgressHandler
      }).then(function () {
        _this3.setState({
          localUploading: false
        });
        showUploadPopup(false);
      })['catch'](function () {
        _this3.setState({
          localUploading: false
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          prefix = _props2.prefix,
          options = _props2.options,
          className = _props2.className;


      return _react2['default'].createElement(
        'div',
        { className: className },
        _react2['default'].createElement(
          'div',
          { className: prefix + '-container' },
          !options.localOnly && options.type !== 'voice' && this.renderNetworkRegion(this.props),
          this.renderLocalUploadRegion(this.props)
        ),
        this.renderFooterRegion()
      );
    }
  }, {
    key: 'networkUrlChanged',
    value: function networkUrlChanged(evt) {
      this.networkUrl = evt.target.value;
    }
  }, {
    key: 'fileProgressHandler',
    value: function fileProgressHandler(progress, index) {
      var localFiles = this.state.localFiles;

      localFiles[index].progress = progress;
      this.setState(localFiles);
    }
  }, {
    key: 'confirmNetworkUrl',


    /**
     * 提取网络图片
     */
    value: function confirmNetworkUrl() {
      var _this4 = this;

      var _props3 = this.props,
          options = _props3.options,
          showUploadPopup = _props3.showUploadPopup;

      if (!this.networkUrl) return false;
      this.setState({
        networkUploading: true,
        buttonText: BUTTON_LOADING_TEXT
      });
      options.onFetch(this.networkUrl).then(function () {
        _this4.setState({
          networkImage: {},
          networkUploading: false,
          buttonText: BUTTON_TEXT
        });
        showUploadPopup(false);
      }, function () {
        _this4.setState({
          networkUploading: false,
          buttonText: BUTTON_TEXT
        });
      });
    }
  }]);
  return UploadPopup;
}(_react.Component);

UploadPopup.defaultProps = {
  networkImage: {},
  networkUploading: false,
  buttonText: BUTTON_TEXT,
  options: {},
  className: ''
};

exports['default'] = UploadPopup;