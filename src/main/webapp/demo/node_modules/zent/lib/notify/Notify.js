'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.success = success;
exports.error = error;
exports.clear = clear;
exports.config = config;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _isBrowser = require('../utils/isBrowser');

var _isBrowser2 = _interopRequireDefault(_isBrowser);

var _NotifyContent = require('./NotifyContent');

var _NotifyContent2 = _interopRequireDefault(_NotifyContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var index = 0;
var durationDefault = 2000;
var containerList = {};
var notifyContainerClass = 'zent-notify-container';

var createContainerId = function createContainerId() {
  return ++index;
};

/**
 * 执行notify结束callback
 * @param  {Function} callback 关闭notify回调
 */
var closeNotifyCallback = function closeNotifyCallback(callback) {
  if (typeof callback === 'function') {
    callback();
  }
};

/**
 * 关闭notify
 * @param  {[type]}   containerId notify容器Id
 * @param  {Function} callback    notify消失时回调
 */
var closeNotify = function closeNotify(containerId) {
  var containerObj = containerList[containerId];
  if (!containerObj) {
    return;
  }

  var container = containerObj.container,
      callback = containerObj.callback,
      timeOutId = containerObj.timeOutId;


  clearTimeout(timeOutId);
  _reactDom2['default'].unmountComponentAtNode(container);
  delete containerList[containerId];
  closeNotifyCallback(callback);
};

/**
 * 关闭所有notify
 */
var closeAllNotify = function closeAllNotify() {
  Object.keys(containerList).forEach(function (containerId) {
    closeNotify(containerId);
  });
};

/**
 * 创建承载notify portal的容器
 */
var createNotifyContainerNode = function createNotifyContainerNode() {
  var notifyContainerNode = document.querySelector('.zent-notify-container');

  if (!notifyContainerNode) {
    var bodyNode = document.body;
    var div = document.createElement('div');
    div.className = notifyContainerClass;
    notifyContainerNode = bodyNode.appendChild(div);
  }

  return notifyContainerNode;
};

/**
 * notify显示
 * @param  {[type]}   text     显示文案
 * @param  {[type]}   duration 显示时长
 * @param  {[type]}   status   notify状态
 * @param  {Function} callback notify消失时回调
 */
var show = function show(text, duration, status, callback) {
  if (!_isBrowser2['default']) return;

  var container = document.createElement('div');
  var notifyContainerNode = createNotifyContainerNode();
  var props = {
    text: text,
    duration: duration,
    status: status,
    isIn: true,
    selector: notifyContainerNode
  };

  _reactDom2['default'].render(_react2['default'].createElement(_NotifyContent2['default'], props), container);
  var containerId = createContainerId();

  var timeOutId = setTimeout(function () {
    _reactDom2['default'].render(_react2['default'].createElement(_NotifyContent2['default'], {
      selector: notifyContainerNode,
      status: status,
      close: function close() {
        return closeNotify(containerId);
      }
    }), container);
  }, props.duration || durationDefault);

  containerList[containerId] = { container: container, callback: callback, timeOutId: timeOutId };
  return containerId;
};

function success(text, duration, callback) {
  return show(text, duration, 'success', callback);
}

function error(text, duration, callback) {
  return show(text, duration, 'error', callback);
}

function clear(containerId) {
  if (containerId) {
    closeNotify(containerId);
  } else {
    closeAllNotify();
  }
}

function config(options) {
  if (options.duration) {
    durationDefault = options.duration;
  }
}