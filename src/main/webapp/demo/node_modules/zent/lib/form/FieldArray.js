'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _set = require('lodash/set');

var _set2 = _interopRequireDefault(_set);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('./utils');

var _unknownProps = require('./unknownProps');

var _unknownProps2 = _interopRequireDefault(_unknownProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-disable no-underscore-dangle */

var FieldArray = function (_Component) {
  (0, _inherits3['default'])(FieldArray, _Component);
  (0, _createClass3['default'])(FieldArray, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var zentForm = this.context.zentForm;

      return {
        zentForm: (0, _extends3['default'])({}, zentForm, {
          prefix: this._name,
          onChangeFieldArray: this.onChangeFieldArray
        })
      };
    }
  }]);

  function FieldArray(props, context) {
    (0, _classCallCheck3['default'])(this, FieldArray);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (FieldArray.__proto__ || Object.getPrototypeOf(FieldArray)).call(this, props, context));

    _this.onChangeFieldArray = function (name, value) {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      var fieldPath = name.replace(_this._name, '');
      fieldPath = fieldPath.indexOf('.') >= 0 ? fieldPath.replace(/\./, '._fieldInternalValue.') : fieldPath + '._fieldInternalValue';
      (0, _set2['default'])(fieldArray, fieldPath, value);
      _this.context.zentForm.onChangeFieldArray && _this.context.zentForm.onChangeFieldArray(_this._name, fieldArray);
    };

    _this.getWrappedComponent = function () {
      return _this.wrappedComponent;
    };

    _this.forEachFields = function (callback) {
      var fieldArray = _this.state.fieldArray;

      var fieldArrayValues = (0, _get2['default'])(_this.context.zentForm.getFormValues(), _this._name, []);
      fieldArray.forEach(function (item, index) {
        callback('[' + index + ']', index, item._fieldInternalKey, fieldArrayValues[index], fieldArrayValues);
      });
    };

    _this.getField = function (index) {
      var fieldArray = _this.state.fieldArray;

      if (index >= fieldArray.length) {
        throw Error('The index for getField is invalid');
      }
      var fieldArrayValues = (0, _get2['default'])(_this.context.zentForm.getFormValues(), _this._name, []);
      return fieldArrayValues[index];
    };

    _this.getAllFields = function () {
      var fieldArrayValues = (0, _get2['default'])(_this.context.zentForm.getFormValues(), _this._name, []);
      return fieldArrayValues;
    };

    _this.mapFields = function (callback) {
      var fieldArray = _this.state.fieldArray;

      var fieldArrayValues = (0, _get2['default'])(_this.context.zentForm.getFormValues(), _this._name, []);
      return (0, _map2['default'])(fieldArray, function (item, index) {
        return callback('[' + index + ']', index, item._fieldInternalKey, fieldArrayValues[index], fieldArrayValues);
      });
    };

    _this.moveFields = function (fromPos, toPos) {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      var fieldLen = fieldArray.length;
      if (fromPos >= fieldLen || toPos >= fieldLen) {
        throw Error('The index for moveFields is invalid');
      }
      var fieldToMove = fieldArray.splice(fromPos, 1)[0];
      fieldArray.splice(toPos, 0, fieldToMove);
      _this.setState({
        fieldArray: fieldArray
      });
    };

    _this.popFields = function () {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      fieldArray.pop();
      _this.setState({
        fieldArray: fieldArray
      });
    };

    _this.pushFields = function (value) {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      fieldArray.push({
        _fieldInternalValue: value,
        _fieldInternalKey: _this._uniqueKey++
      });
      _this.setState({
        fieldArray: fieldArray
      });
    };

    _this.removeFields = function (index) {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      if (index >= fieldArray.length) {
        throw Error('The index for removeFields is invalid');
      }
      fieldArray.splice(index, 1);
      _this.setState({
        fieldArray: fieldArray
      });
    };

    _this.removeAllFields = function () {
      _this.setState({
        fieldArray: []
      });
    };

    _this.shiftFields = function () {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      fieldArray.shift();
      _this.setState({
        fieldArray: fieldArray
      });
    };

    _this.swapFields = function (indexA, indexB) {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      var fieldLen = fieldArray.length;
      if (indexA >= fieldLen || indexB >= fieldLen) {
        throw Error('The index to swap in invalid');
      }
      var fieldA = (0, _assign2['default'])({}, fieldArray[indexA]);
      fieldArray[indexA] = fieldArray[indexB];
      fieldArray[indexB] = fieldA;
      _this.setState({
        fieldArray: fieldArray
      });
    };

    _this.unshiftFields = function (value) {
      var fieldArray = (0, _assign2['default'])([], _this.state.fieldArray);
      fieldArray.unshift({
        _fieldInternalValue: value,
        _fieldInternalKey: _this._uniqueKey++
      });
      _this.setState({
        fieldArray: fieldArray
      });
    };

    if (!context.zentForm) {
      throw new Error('FieldArray must be in zent-form');
    }

    _this.state = {
      fieldArray: []
    };
    _this._name = (0, _utils.prefixName)(context.zentForm, props.name);
    _this._uniqueKey = 0;
    return _this;
  }

  (0, _createClass3['default'])(FieldArray, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _isEqual2['default'])(nextState, this.state) || !(0, _isEqual2['default'])(nextProps, this.props);
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (!this.props.name) {
        throw new Error('FieldArray requires a name property when used');
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('name' in nextProps) {
        this._name = (0, _utils.prefixName)(this.context.zentForm, nextProps.name);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          component = _props.component,
          rest = (0, _objectWithoutProperties3['default'])(_props, ['component']);

      var passableProps = (0, _extends3['default'])({}, rest, {
        ref: function ref(_ref) {
          _this2.wrappedComponent = _ref;
        },
        fields: {
          name: this._name,
          length: this.state.fieldArray.length,
          forEach: this.forEachFields,
          get: this.getField,
          getAll: this.getAllFields,
          map: this.mapFields,
          move: this.moveFields,
          pop: this.popFields,
          push: this.pushFields,
          remove: this.removeFields,
          removeAll: this.removeAllFields,
          shift: this.shiftFields,
          swap: this.swapFields,
          unshift: this.unshiftFields
        }
      });

      // 原生的标签不能传非标准属性进去
      if (typeof component === 'string') {
        return (0, _react.createElement)(component, (0, _extends3['default'])({}, (0, _omit2['default'])(passableProps, _unknownProps2['default'])));
      }

      return (0, _react.createElement)(component, passableProps);
    }
  }]);
  return FieldArray;
}(_react.Component);

FieldArray.propTypes = {
  name: _propTypes2['default'].string.isRequired,
  component: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]).isRequired
};
FieldArray.defaultProps = {};
FieldArray.contextTypes = {
  zentForm: _propTypes2['default'].object
};
FieldArray.childContextTypes = {
  zentForm: _propTypes2['default'].object.isRequired
};
exports['default'] = FieldArray;