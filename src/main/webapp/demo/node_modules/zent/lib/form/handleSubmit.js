'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isPromise = require('../utils/isPromise');

var _isPromise2 = _interopRequireDefault(_isPromise);

var _SubmissionError = require('./SubmissionError');

var _SubmissionError2 = _interopRequireDefault(_SubmissionError);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var handleSubmit = function handleSubmit(submit, zentForm) {
  var props = zentForm.props;
  var values = zentForm.getFormValues();
  var onSubmitSuccess = props.onSubmitSuccess,
      onSubmitFail = props.onSubmitFail,
      scrollToError = props.scrollToError;

  var validationErrors = void 0;

  zentForm.setFormDirty(true);

  var handleOnSubmitError = function handleOnSubmitError(error) {
    zentForm.updateFormSubmitStatus(false);
    onSubmitFail(error);
  };

  var handleOnSubmitSuccess = function handleOnSubmitSuccess(result) {
    zentForm.updateFormSubmitStatus(true);
    onSubmitSuccess(result);
  };

  // 如果有异步校验未完成，阻止表单提交
  if (zentForm.isValidating()) {
    if (onSubmitFail) {
      handleOnSubmitError(new _SubmissionError2['default']({
        isValidating: true
      }));
    }
    return;
  }

  var handleSubmitError = function handleSubmitError(submitError) {
    // 只处理SubmissionError类型的错误
    var error = submitError instanceof _SubmissionError2['default'] ? submitError.errors : undefined;
    if (onSubmitFail) {
      handleOnSubmitError(error);
    }

    return error;
  };

  var doSubmit = function doSubmit() {
    var result = void 0;
    try {
      // 传入zentForm是为了使用服务端校验时可以调用setFieldExternalErrors方法
      result = submit(values, zentForm);
    } catch (submitError) {
      var error = handleSubmitError(submitError);
      if (error || onSubmitFail) {
        return error;
      }
      // 没有处理过的error才throw
      throw submitError;
    }

    if ((0, _isPromise2['default'])(result)) {
      zentForm.setState({
        isSubmitting: true
      });

      return result.then(function (submitResult) {
        zentForm.setState({
          isSubmitting: false
        });
        if (onSubmitSuccess) {
          handleOnSubmitSuccess(submitResult);
        }
        return submitResult;
      }, function (submitError) {
        zentForm.setState({
          isSubmitting: false
        });
        var error = handleSubmitError(submitError);
        if (error || onSubmitFail) {
          return error;
        }

        throw submitError;
      });
    }

    // submit是一个同步过程，直接当成功处理
    if (onSubmitSuccess) {
      handleOnSubmitSuccess(result);
    }
    return result;
  };

  var afterValidation = function afterValidation() {
    if (!zentForm.isValid()) {
      // 存在校验错误
      validationErrors = zentForm.getValidationErrors();

      // 滚动到第一个错误处
      scrollToError && (0, _utils.srcollToFirstError)(zentForm.fields);

      if (onSubmitFail) {
        handleOnSubmitError(new _SubmissionError2['default'](validationErrors));
      }
    } else if (!zentForm.isFormAsyncValidated()) {
      // 存在没有进行过的异步校验
      zentForm.asyncValidateForm(function () {
        return doSubmit();
      }, function (error) {
        if (onSubmitFail) {
          handleOnSubmitError(new _SubmissionError2['default'](error));
        }
      });
    } else {
      return doSubmit();
    }
  };

  var allIsValidated = zentForm.fields.every(function (field) {
    return field.props.validateOnChange || field.props.validateOnBlur;
  });

  if (allIsValidated) {
    // 不存在没有进行过同步校验的field
    afterValidation();
  } else {
    zentForm.validateForm(true, afterValidation);
  }
};

exports['default'] = handleSubmit;