'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _has = require('lodash/has');

var _has2 = _interopRequireDefault(_has);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Cell = function (_Component) {
  (0, _inherits3['default'])(Cell, _Component);

  function Cell() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, Cell);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref = Cell.__proto__ || Object.getPrototypeOf(Cell)).call.apply(_ref, [this].concat(args))), _this), _this.getText = function (props) {
      return (0, _get2['default'])(props, 'data.' + (0, _get2['default'])(props, 'column.name'));
    }, _this.onClick = function (e) {
      var _this$props = _this.props,
          data = _this$props.data,
          onCellClick = _this$props.column.onCellClick;

      if (typeof onCellClick === 'function') {
        onCellClick(data, e);
      }
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  (0, _createClass3['default'])(Cell, [{
    key: 'isInvalidRenderCellText',
    value: function isInvalidRenderCellText(text) {
      return text && !_react2['default'].isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      // 如果存在 bodyRender 属性则 render
      if ((0, _has2['default'])(nextProps.column, 'bodyRender')) {
        return true;
      }

      // 如果不存在 bodyRender 则比较 name 对应的值是否一致
      return this.getText(this.props) !== this.getText(nextProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          prefix = _props.prefix,
          column = _props.column,
          data = _props.data,
          pos = _props.pos;
      var name = column.name,
          bodyRender = column.bodyRender,
          textAlign = column.textAlign,
          nowrap = column.nowrap,
          className = column.className;


      var text = (0, _get2['default'])(data, name, null);
      var tdProps = void 0;
      var colSpan = void 0;
      var rowSpan = void 0;

      if (typeof bodyRender === 'function') {
        text = bodyRender(data, pos, name);
        if (this.isInvalidRenderCellText(text)) {
          tdProps = text.props || {};
          colSpan = tdProps.colSpan;
          rowSpan = tdProps.rowSpan;
          text = text.children;
        }
      }

      if (this.isInvalidRenderCellText(text)) {
        text = null;
      }

      if (rowSpan === 0 || colSpan === 0) {
        return null;
      }

      return _react2['default'].createElement(
        'td',
        (0, _extends3['default'])({
          className: (0, _classnames3['default'])(prefix + '-grid-td', className, (_classnames = {}, (0, _defineProperty3['default'])(_classnames, prefix + '-grid-text-align-' + textAlign, textAlign), (0, _defineProperty3['default'])(_classnames, prefix + '-grid-nowrap', nowrap), _classnames))
        }, tdProps, {
          onClick: this.onClick
        }),
        text
      );
    }
  }]);
  return Cell;
}(_react.Component);

exports['default'] = Cell;