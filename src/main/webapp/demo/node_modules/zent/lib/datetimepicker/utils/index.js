'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSameDate = exports.isArray = exports.goYears = exports.goMonths = exports.goDays = exports.isAfterMonth = exports.isBeforeMonth = exports.isCurrentMonth = exports.isSameMonth = exports.isSameDate = exports.getDateStr = exports.getMonthStr = exports.padLeft = exports.TIME_END = exports.TIME_BEGIN = exports.ONEDAY = exports.CURRENT_DATE = exports.CURRENT_MONTH = exports.CURRENT_YEAR = exports.CURRENT_DAY = exports.CURRENT = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.formatDate = formatDate;
exports.parseDate = parseDate;
exports.dayStart = dayStart;
exports.dayEnd = dayEnd;
exports.setTime = setTime;
exports.getQuarterFromDate = getQuarterFromDate;

var _date = require('zan-utils/date');

var _timeLocale = require('../../i18n/time-locale');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var CURRENT = exports.CURRENT = new Date();
var CURRENT_DAY = exports.CURRENT_DAY = new Date(CURRENT.getFullYear(), CURRENT.getMonth(), CURRENT.getDate());
var CURRENT_YEAR = exports.CURRENT_YEAR = CURRENT.getFullYear();
var CURRENT_MONTH = exports.CURRENT_MONTH = CURRENT.getMonth();
var CURRENT_DATE = exports.CURRENT_DATE = CURRENT.getDate();
var ONEDAY = exports.ONEDAY = 24 * 60 * 60 * 1000;

var TIME_BEGIN = exports.TIME_BEGIN = '00:00:00';
var TIME_END = exports.TIME_END = '23:59:59';

var padLeft = exports.padLeft = function padLeft(val) {
  return val < 10 ? '0' + val : val;
};

var getMonthStr = exports.getMonthStr = function getMonthStr(val) {
  return val.getFullYear() + '-' + padLeft(val.getMonth() + 1);
};

var getDateStr = exports.getDateStr = function getDateStr(val) {
  return val.getFullYear() + '-' + padLeft(val.getMonth() + 1) + '-' + val.getDate();
};

var isSameDate = exports.isSameDate = function isSameDate(val, cmp) {
  return val.getFullYear() === cmp.getFullYear() && val.getMonth() === cmp.getMonth() && val.getDate() === cmp.getDate();
};

var isSameMonth = exports.isSameMonth = function isSameMonth(val, cmp) {
  return val.getFullYear() === cmp.getFullYear() && val.getMonth() === cmp.getMonth();
};

var isCurrentMonth = exports.isCurrentMonth = function isCurrentMonth(val) {
  return val.getMonth() === CURRENT_MONTH;
};

var isBeforeMonth = exports.isBeforeMonth = function isBeforeMonth(val, cpr) {
  if (val.getFullYear() < cpr.getFullYear()) {
    return true;
  }
  return val.getFullYear() === cpr.getFullYear() && val.getMonth() < cpr.getMonth();
};

var isAfterMonth = exports.isAfterMonth = function isAfterMonth(val, cpr) {
  if (val.getFullYear() > cpr.getFullYear()) {
    return true;
  }
  return val.getFullYear() === cpr.getFullYear() && val.getMonth() > cpr.getMonth();
};

var goDays = exports.goDays = function goDays(val, diff) {
  return new Date(val.getTime() + diff * ONEDAY);
};

var goMonths = exports.goMonths = function goMonths(val, diff) {
  var cp = new Date(val);
  return new Date(cp.getFullYear(), cp.getMonth() + diff, 1);
};

var goYears = exports.goYears = function goYears(val, diff) {
  var cp = new Date(val);
  return new Date(cp.setFullYear(cp.getFullYear() + diff));
};

var isArray = exports.isArray = function isArray(val) {
  return Array.isArray(val);
};

var setSameDate = exports.setSameDate = function setSameDate(val, target) {
  val.setFullYear(target.getFullYear());
  val.setMonth(target.getMonth());
  val.setDate(target.getDate());
  return val;
};

/**
 * add by fancy to inject i18n
 * simple wrapper for formatDate in zan-utils
 *
 * @param {Date|number} date The date to format
 * @param {string} format
 * @param {string|object} locale the i18n setting for fecha
 * @returns {strning} format result by zan-utils
 */
function formatDate(date, format) {
  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _timeLocale.getLocale)() || 'zh';

  return (0, _date.formatDate)(date, format, locale);
}

/**
 * add by fancy to inject i18n
 * simple wrapper for parseDate in zan-utils
 *
 * @param {string} dateStr Date string to parse
 * @param {string} format
 * @param {string|object} locale the i18n setting for fecha
 */
function parseDate(dateStr, format) {
  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _timeLocale.getLocale)() || 'zh';

  return (0, _date.parseDate)(dateStr, format, locale);
}

function dayStart() {
  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();

  return setTime(date);
}

function dayEnd() {
  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();

  return setTime(date, TIME_END);
}

function setTime(date) {
  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TIME_BEGIN;

  var timeArr = void 0;
  if (time instanceof Date) {
    timeArr = [time.getHours(), time.getMinutes(), time.getSeconds()];
  } else {
    timeArr = time.split(':');
  }

  var dateTimeArr = [date.getFullYear(), date.getMonth(), date.getDate()].concat((0, _toConsumableArray3['default'])(timeArr));
  return new (Function.prototype.bind.apply(Date, [null].concat((0, _toConsumableArray3['default'])(dateTimeArr))))();
}

function getQuarterFromDate(date) {
  var month = date.getMonth();

  var quarter = void 0;
  switch (month) {
    case 0:
    case 1:
    case 2:
      quarter = 0;
      break;
    case 3:
    case 4:
    case 5:
      quarter = 1;
      break;
    case 6:
    case 7:
    case 8:
      quarter = 2;
      break;
    case 9:
    case 10:
    case 11:
      quarter = 3;
      break;
    default:
      break;
  }

  return quarter;
}