'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _popover = require('../popover');

var _popover2 = _interopRequireDefault(_popover);

var _getWidth = require('../utils/getWidth');

var _getWidth2 = _interopRequireDefault(_getWidth);

var _i18n = require('../i18n');

var _default = require('../i18n/default');

var _MonthPanel = require('./month/MonthPanel');

var _MonthPanel2 = _interopRequireDefault(_MonthPanel);

var _PanelFooter = require('./common/PanelFooter');

var _PanelFooter2 = _interopRequireDefault(_PanelFooter);

var _utils = require('./utils');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function extractStateFromProps(props) {
  var showPlaceholder = void 0;
  var selected = void 0;
  var actived = void 0;
  var format = props.format,
      value = props.value,
      defaultValue = props.defaultValue;


  if (value) {
    var tmp = (0, _utils.parseDate)(value, format);
    if (tmp) {
      showPlaceholder = false;
      selected = actived = tmp;
    } else {
      // eslint-disable-line
      showPlaceholder = true;
      actived = (0, _utils.dayStart)();
    }
  } else {
    showPlaceholder = true;
    if (defaultValue) {
      actived = (0, _utils.parseDate)(defaultValue, format);
    } else {
      actived = (0, _utils.dayStart)();
    }
  }

  return {
    value: selected && (0, _utils.formatDate)(selected, format),
    actived: actived,
    selected: selected,
    openPanel: false,
    showPlaceholder: showPlaceholder
  };
}

var MonthPicker = function (_ref) {
  (0, _inherits3['default'])(MonthPicker, _ref);

  function MonthPicker(props) {
    (0, _classCallCheck3['default'])(this, MonthPicker);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (MonthPicker.__proto__ || Object.getPrototypeOf(MonthPicker)).call(this, props));

    _this.onChangeMonth = function (val) {
      _this.setState({
        actived: val
      });
    };

    _this.onSelectMonth = function (val) {
      var isYear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          isFooterVisble = _this$props.isFooterVisble;

      var month = val.getMonth();

      if (!isYear && _this.isDisabled(month)) return;

      _this.setState({
        selected: val,
        actived: val
      }, function () {
        if (!isFooterVisble) {
          _this.onConfirm();
        }
      });

      onClick && onClick(val);
    };

    _this.onClearInput = function (evt) {
      evt.stopPropagation();
      _this.props.onChange('');
    };

    _this.onConfirm = function () {
      var _this$props2 = _this.props,
          format = _this$props2.format,
          onChange = _this$props2.onChange,
          selected = _this.state.selected;


      var value = '';
      if (selected) {
        value = (0, _utils.formatDate)(selected, format);
      }

      _this.setState({
        value: value,
        openPanel: false,
        showPlaceholder: false
      });
      onChange(value);
    };

    _this.isDisabled = function (val) {
      var year = _this.state.actived.getFullYear();
      var dateStr = year + '-' + (val + 1);
      var ret = (0, _utils.parseDate)(dateStr, 'YYYY-MM');
      var _this$props3 = _this.props,
          disabledDate = _this$props3.disabledDate,
          min = _this$props3.min,
          max = _this$props3.max,
          format = _this$props3.format;


      if (disabledDate && disabledDate(ret)) return true;
      if (min && ret < (0, _utils.parseDate)(min, format)) return true;
      if (max && ret > (0, _utils.parseDate)(max, format)) return true;

      return false;
    };

    _this.togglePicker = function () {
      var _this$props4 = _this.props,
          onOpen = _this$props4.onOpen,
          onClose = _this$props4.onClose,
          disabled = _this$props4.disabled;

      var openPanel = !_this.state.openPanel;

      if (disabled) return;

      openPanel ? onOpen && onOpen() : onClose && onClose();
      _this.setState({
        openPanel: !_this.state.openPanel
      });
    };

    _this.state = extractStateFromProps(props);
    return _this;
  }

  (0, _createClass3['default'])(MonthPicker, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(next) {
      var state = extractStateFromProps(next);
      this.setState(state);
    }
  }, {
    key: 'renderPicker',
    value: function renderPicker(i18n) {
      var _this2 = this;

      var _props = this.props,
          confirmText = _props.confirmText,
          isFooterVisble = _props.isFooterVisble,
          _state = this.state,
          actived = _state.actived,
          openPanel = _state.openPanel,
          selected = _state.selected;

      var monthPicker = void 0;
      if (openPanel) {
        var monthPickerCls = (0, _classnames2['default'])({
          'month-picker': true,
          small: isFooterVisble
        });
        monthPicker = _react2['default'].createElement(
          'div',
          { className: monthPickerCls, ref: function ref(_ref2) {
              return _this2.picker = _ref2;
            } },
          _react2['default'].createElement(_MonthPanel2['default'], {
            actived: actived,
            selected: selected,
            onChange: this.onChangeMonth,
            onSelect: this.onSelectMonth,
            disabledDate: this.isDisabled,
            i18n: i18n
          }),
          isFooterVisble ? _react2['default'].createElement(_PanelFooter2['default'], {
            buttonText: confirmText || i18n.confirm,
            linkText: i18n.current.month,
            linkCls: 'link--current',
            onClickLink: function onClickLink() {
              return _this2.onSelectMonth(_utils.CURRENT);
            },
            onClickButton: this.onConfirm
          }) : null
        );
      }

      return monthPicker;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props2 = this.props,
          className = _props2.className,
          disabled = _props2.disabled,
          name = _props2.name,
          placeholder = _props2.placeholder,
          popPosition = _props2.popPosition,
          prefix = _props2.prefix,
          width = _props2.width,
          _state2 = this.state,
          openPanel = _state2.openPanel,
          showPlaceholder = _state2.showPlaceholder,
          value = _state2.value;

      var wrapperCls = prefix + '-datetime-picker ' + className;
      var inputCls = (0, _classnames2['default'])({
        'picker-input': true,
        'picker-input--filled': !showPlaceholder,
        'picker-input--disabled': disabled
      });
      var widthStyle = (0, _getWidth2['default'])(width);

      return _react2['default'].createElement(
        'div',
        { style: widthStyle, className: wrapperCls },
        _react2['default'].createElement(
          _i18n.I18nReceiver,
          { componentName: 'TimePicker', defaultI18n: _default.TimePicker },
          function (i18n) {
            return _react2['default'].createElement(
              _popover2['default'],
              {
                cushion: 5,
                visible: openPanel,
                onVisibleChange: _this3.togglePicker,
                className: prefix + '-datetime-picker-popover ' + className + '    -popover',
                position: _constants.popPositionMap[popPosition.toLowerCase()]
              },
              _react2['default'].createElement(
                _popover2['default'].Trigger.Click,
                null,
                _react2['default'].createElement(
                  'div',
                  { style: widthStyle, className: inputCls },
                  _react2['default'].createElement(_input2['default'], {
                    name: name,
                    value: showPlaceholder ? placeholder || i18n.month : value,
                    onChange: _constants.noop,
                    disabled: disabled
                  }),
                  _react2['default'].createElement('span', { className: 'zenticon zenticon-calendar-o' }),
                  _react2['default'].createElement('span', {
                    onClick: _this3.onClearInput,
                    className: 'zenticon zenticon-close-circle'
                  })
                )
              ),
              _react2['default'].createElement(
                _popover2['default'].Content,
                null,
                _this3.renderPicker(i18n)
              )
            );
          }
        )
      );
    }
  }]);
  return MonthPicker;
}(_react.PureComponent || _react.Component);

MonthPicker.propTypes = (0, _extends3['default'])({}, _constants.commonPropTypes);
MonthPicker.defaultProps = (0, _extends3['default'])({}, _constants.commonProps, {
  placeholder: '',
  format: 'YYYY-MM'
});
exports['default'] = MonthPicker;