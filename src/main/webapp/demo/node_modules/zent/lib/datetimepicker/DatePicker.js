'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _popover = require('../popover');

var _popover2 = _interopRequireDefault(_popover);

var _getWidth = require('../utils/getWidth');

var _getWidth2 = _interopRequireDefault(_getWidth);

var _i18n = require('../i18n');

var _default = require('../i18n/default');

var _DatePanel = require('./date/DatePanel');

var _DatePanel2 = _interopRequireDefault(_DatePanel);

var _PanelFooter = require('./common/PanelFooter');

var _PanelFooter2 = _interopRequireDefault(_PanelFooter);

var _utils = require('./utils');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function extractStateFromProps(props) {
  var selected = void 0;
  var actived = void 0;
  var showPlaceholder = void 0;
  var openPanel = props.openPanel,
      value = props.value,
      format = props.format,
      defaultValue = props.defaultValue,
      defaultTime = props.defaultTime;


  if (value) {
    var tmp = (0, _utils.parseDate)(value, format);

    if (tmp) {
      showPlaceholder = false;
      selected = tmp;
      actived = (0, _utils.setTime)(tmp);
    } else {
      // eslint-disable-line
      showPlaceholder = true;
      actived = (0, _utils.dayStart)();
    }
  } else {
    showPlaceholder = true;

    /**
     * 当前面板显示优先级：
     * defalutValue > currentDay
     */

    if (defaultValue) {
      actived = (0, _utils.parseDate)(defaultValue, format);
    } else {
      actived = (0, _utils.dayStart)();
    }

    actived = (0, _utils.parseDate)(actived, format);
  }

  if (defaultTime) {
    actived = (0, _utils.setTime)(actived, defaultTime);
  }
  /**
   * actived 用来临时存放日期，改变年份和月份的时候只会改动 actived 的值
   * selected 用来存放用户选择的日期，点击日期时会设置 selected 的值
   * activedTime 用来存放用户选择的时间
   */

  return {
    value: selected && (0, _utils.formatDate)(selected, format),
    actived: actived,
    selected: selected,
    activedTime: selected || actived,
    openPanel: openPanel,
    showPlaceholder: showPlaceholder
  };
}

var DatePicker = function (_ref) {
  (0, _inherits3['default'])(DatePicker, _ref);

  function DatePicker(props) {
    (0, _classCallCheck3['default'])(this, DatePicker);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    _initialiseProps.call(_this);

    var isFooterVisble = props.isFooterVisble,
        showTime = props.showTime,
        value = props.value,
        valueType = props.valueType;
    /**
     * 如果没有有明确指定 valueType，则返回和 value 一致的值，数字或日期或字符串
     */

    if (valueType) {
      _this.retType = valueType.toLowerCase();
    } else if (value) {
      if (typeof value === 'number') _this.retType = 'number';
      if (value instanceof Date) _this.retType = 'date';
    }

    _this.state = extractStateFromProps(props);
    // 没有footer的逻辑
    _this.isfooterShow = showTime || isFooterVisble;
    return _this;
  }

  (0, _createClass3['default'])(DatePicker, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(next) {
      var state = extractStateFromProps(next);
      this.setState(state);
    }
  }, {
    key: 'getReturnValue',


    /**
     * 如果传入为数字，返回值也为数字
     * 如果传入为 Date 的实例，返回值也为 Date 的实例
     * 默认返回 format 格式的字符串
     */

    value: function getReturnValue(date, format) {
      if (this.retType === 'number') {
        return date.getTime();
      }

      if (this.retType === 'date') {
        return date;
      }

      return (0, _utils.formatDate)(date, format);
    }
  }, {
    key: 'renderPicker',
    value: function renderPicker(i18n) {
      var _this2 = this;

      var _props = this.props,
          confirmText = _props.confirmText,
          disabledTime = _props.disabledTime,
          format = _props.format,
          max = _props.max,
          min = _props.min,
          _state = this.state,
          actived = _state.actived,
          activedTime = _state.activedTime,
          openPanel = _state.openPanel,
          selected = _state.selected;

      var showTime = void 0;
      var datePicker = void 0;

      // let isShow
      if (this.props.showTime) {
        showTime = (0, _assign2['default'])({
          min: min && (0, _utils.parseDate)(min, format),
          max: max && (0, _utils.parseDate)(max, format),
          actived: activedTime,
          disabledTime: _constants.noop
        }, {
          disabledTime: disabledTime && disabledTime(),
          onChange: this.onChangeTime
        });
      }

      // 打开面板的时候才渲染
      if (openPanel) {
        var isDisabled = this.isDisabled(_utils.CURRENT_DAY);
        var linkCls = (0, _classnames2['default'])({
          'link--current': true,
          'link--disabled': isDisabled
        });
        var datePickerCls = (0, _classnames2['default'])({
          'date-picker': true,
          small: this.isfooterShow
        });

        datePicker = _react2['default'].createElement(
          'div',
          { className: datePickerCls, ref: function ref(_ref2) {
              return _this2.picker = _ref2;
            } },
          _react2['default'].createElement(_DatePanel2['default'], {
            showTime: showTime,
            actived: actived,
            selected: selected,
            disabledDate: this.isDisabled,
            onSelect: this.onSelectDate,
            onChange: this.onChangeDate,
            onPrev: this.onChangeMonth('prev'),
            onNext: this.onChangeMonth('next'),
            i18n: i18n
          }),
          this.isfooterShow ? _react2['default'].createElement(_PanelFooter2['default'], {
            buttonText: confirmText || i18n.confirm,
            onClickButton: this.onConfirm,
            linkText: i18n.current.date,
            linkCls: linkCls,
            showLink: !isDisabled,
            onClickLink: function onClickLink() {
              return _this2.onSelectDate(_utils.CURRENT_DAY);
            }
          }) : null
        );
      }

      return datePicker;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props2 = this.props,
          prefix = _props2.prefix,
          className = _props2.className,
          disabled = _props2.disabled,
          width = _props2.width,
          popPosition = _props2.popPosition,
          name = _props2.name,
          placeholder = _props2.placeholder,
          _state2 = this.state,
          showPlaceholder = _state2.showPlaceholder,
          openPanel = _state2.openPanel,
          value = _state2.value;

      var wrapperCls = prefix + '-datetime-picker ' + className;
      var inputCls = (0, _classnames2['default'])({
        'picker-input': true,
        'picker-input--filled': !showPlaceholder,
        'picker-input--disabled': disabled
      });
      var widthStyle = (0, _getWidth2['default'])(width);

      return _react2['default'].createElement(
        'div',
        { style: widthStyle, className: wrapperCls },
        _react2['default'].createElement(
          _i18n.I18nReceiver,
          { componentName: 'TimePicker', defaultI18n: _default.TimePicker },
          function (i18n) {
            return _react2['default'].createElement(
              _popover2['default'],
              {
                cushion: 5,
                visible: openPanel,
                onVisibleChange: _this3.togglePicker,
                className: prefix + '-datetime-picker-popover ' + className + '-popover',
                position: _constants.popPositionMap[popPosition.toLowerCase()]
              },
              _react2['default'].createElement(
                _popover2['default'].Trigger.Click,
                null,
                _react2['default'].createElement(
                  'div',
                  {
                    style: widthStyle,
                    className: inputCls,
                    onClick: function onClick(evt) {
                      return evt.preventDefault();
                    }
                  },
                  _react2['default'].createElement(_input2['default'], {
                    name: name,
                    value: showPlaceholder ? placeholder || i18n.date : value,
                    onChange: _constants.noop,
                    disabled: disabled
                  }),
                  _react2['default'].createElement('span', { className: 'zenticon zenticon-calendar-o' }),
                  _react2['default'].createElement('span', {
                    onClick: _this3.onClearInput,
                    className: 'zenticon zenticon-close-circle'
                  })
                )
              ),
              _react2['default'].createElement(
                _popover2['default'].Content,
                null,
                _this3.renderPicker(i18n)
              )
            );
          }
        )
      );
    }
  }]);
  return DatePicker;
}(_react.PureComponent || _react.Component);

DatePicker.propTypes = (0, _extends3['default'])({}, _constants.commonPropTypes, {
  showTime: _propTypes2['default'].bool,
  onBeforeConfirm: _propTypes2['default'].func,
  onBeforeClear: _propTypes2['default'].func,
  valueType: _propTypes2['default'].oneOf(['string', 'number', 'date'])
});
DatePicker.defaultProps = (0, _extends3['default'])({}, _constants.commonProps, {
  placeholder: ''
});

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.retType = 'string';

  this.getDate = function () {
    return _this4.state.actived;
  };

  this.onChangeDate = function (val) {
    _this4.setState({
      actived: val
    });
  };

  this.onSelectDate = function (val) {
    var onClick = _this4.props.onClick;
    var activedTime = _this4.state.activedTime;

    if (_this4.isDisabled(val)) return;
    // update activedTime here
    _this4.setState({
      actived: val,
      selected: val,
      activedTime: (0, _utils.setSameDate)(activedTime, val)
    }, function () {
      if (!_this4.isfooterShow) {
        _this4.onConfirm();
      }
    });
    onClick && onClick(val);
  };

  this.onChangeTime = function (val, type) {
    var fn = _constants.timeFnMap[type];
    var tmp = new Date(_this4.state.activedTime);
    tmp[fn](val);

    _this4.setState({
      activedTime: tmp
    });
  };

  this.onChangeMonth = function (type) {
    var typeMap = {
      prev: -1,
      next: 1
    };

    return function () {
      var actived = _this4.state.actived;

      var acp = (0, _utils.goMonths)(actived, typeMap[type]);

      _this4.setState({
        actived: acp
      });
    };
  };

  this.onClearInput = function (evt) {
    var _props3 = _this4.props,
        onChange = _props3.onChange,
        onBeforeClear = _props3.onBeforeClear;

    if (onBeforeClear && !onBeforeClear()) return; // 用户可以通过这个函数返回 false 来阻止清空

    evt.stopPropagation();
    onChange('');
  };

  this.onConfirm = function () {
    var _state3 = _this4.state,
        selected = _state3.selected,
        activedTime = _state3.activedTime;
    var _props4 = _this4.props,
        format = _props4.format,
        showTime = _props4.showTime,
        onClose = _props4.onClose,
        onChange = _props4.onChange,
        onBeforeConfirm = _props4.onBeforeConfirm;


    if (onBeforeConfirm && !onBeforeConfirm()) return; //
    // 如果没有选择日期则默认选中当前日期
    var tmp = selected || (0, _utils.dayStart)();
    if (_this4.isDisabled(tmp)) return;

    if (showTime) {
      tmp = new Date(tmp.getFullYear(), tmp.getMonth(), tmp.getDate(), activedTime.getHours(), activedTime.getMinutes(), activedTime.getSeconds());
    }

    _this4.setState({
      value: (0, _utils.formatDate)(tmp, format),
      openPanel: false,
      showPlaceholder: false
    });

    var ret = _this4.getReturnValue(tmp, format);
    onChange(ret);
    onClose && onClose();
  };

  this.isDisabled = function (val) {
    var _props5 = _this4.props,
        disabledDate = _props5.disabledDate,
        min = _props5.min,
        max = _props5.max,
        format = _props5.format;

    if (disabledDate && disabledDate(val)) return true;
    if (min && (0, _utils.dayEnd)(val) < (0, _utils.parseDate)(min, format)) return true;
    if (max && (0, _utils.dayStart)(val) > (0, _utils.parseDate)(max, format)) return true;

    return false;
  };

  this.togglePicker = function () {
    var _props6 = _this4.props,
        onOpen = _props6.onOpen,
        onClose = _props6.onClose,
        disabled = _props6.disabled;

    var openPanel = !_this4.state.openPanel;
    if (disabled) return;

    openPanel ? onOpen && onOpen() : onClose && onClose();
    _this4.setState({
      openPanel: openPanel
    });
  };
};

exports['default'] = DatePicker;