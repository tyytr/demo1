'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _popover = require('../popover');

var _popover2 = _interopRequireDefault(_popover);

var _getWidth = require('../utils/getWidth');

var _getWidth2 = _interopRequireDefault(_getWidth);

var _i18n = require('../i18n');

var _default = require('../i18n/default');

var _DatePanel = require('./date/DatePanel');

var _DatePanel2 = _interopRequireDefault(_DatePanel);

var _PanelFooter = require('./common/PanelFooter');

var _PanelFooter2 = _interopRequireDefault(_PanelFooter);

var _utils = require('./utils');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function getSelectedWeek(val) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var offset = val.getDay();
  return [(0, _utils.goDays)(val, start - offset), (0, _utils.goDays)(val, 6 + start - offset)];
}

function extractStateFromProps(props) {
  var selected = void 0;
  var actived = void 0;
  var showPlaceholder = void 0;
  var openPanel = props.openPanel,
      value = props.value,
      format = props.format,
      defaultValue = props.defaultValue,
      startDay = props.startDay;

  // 如果 value 是数组就取数组第一个值，否则就取 value

  var hasValue = (0, _isArray2['default'])(value) ? value[0] : value;

  if (hasValue) {
    var tmp = (0, _utils.parseDate)(hasValue, format);

    if (tmp) {
      showPlaceholder = false;
      selected = getSelectedWeek(tmp, startDay);
      actived = (0, _utils.setTime)(tmp);
    } else {
      // eslint-disable-line
      showPlaceholder = true;
      actived = (0, _utils.dayStart)();
    }
  } else {
    showPlaceholder = true;

    if (defaultValue) {
      actived = (0, _utils.parseDate)(defaultValue, format);
    } else {
      actived = (0, _utils.dayStart)();
    }

    actived = (0, _utils.parseDate)(actived, format);
  }

  /**
   * actived 用来临时存放日期，改变年份和月份的时候只会改动 actived 的值
   * selected 用来存放用户选择的日期，点击日期时会设置 selected 的值
   */

  var ret = void 0;
  if (selected) {
    ret = selected.map(function (item) {
      return (0, _utils.formatDate)(item, format);
    });
  }
  return {
    value: ret,
    actived: actived,
    selected: selected,
    openPanel: openPanel,
    showPlaceholder: showPlaceholder
  };
}

var WeekPicker = function (_ref) {
  (0, _inherits3['default'])(WeekPicker, _ref);

  function WeekPicker(props) {
    (0, _classCallCheck3['default'])(this, WeekPicker);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (WeekPicker.__proto__ || Object.getPrototypeOf(WeekPicker)).call(this, props));

    _initialiseProps.call(_this);

    var value = props.value,
        valueType = props.valueType,
        showTime = props.showTime,
        isFooterVisble = props.isFooterVisble;


    if (valueType) {
      _this.retType = valueType.toLowerCase();
    } else if (value) {
      if (typeof value === 'number') _this.retType = 'number';
      if (value instanceof Date) _this.retType = 'date';
    }

    _this.state = extractStateFromProps(props);
    // 没有footer的逻辑
    _this.isfooterShow = showTime || isFooterVisble;
    return _this;
  }

  (0, _createClass3['default'])(WeekPicker, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(next) {
      var state = extractStateFromProps(next);
      this.setState(state);
    }
  }, {
    key: 'getReturnValue',


    /**
     * 如果传入为数字，返回值也为数字
     * 如果传入为 Date 的实例，返回值也为 Date 的实例
     * 默认返回 format 格式的字符串
     */

    value: function getReturnValue(date, format) {
      if (this.retType === 'number') {
        return date.getTime();
      }

      if (this.retType === 'date') {
        return date;
      }

      return (0, _utils.formatDate)(date, format);
    }
  }, {
    key: 'renderPicker',
    value: function renderPicker(i18n) {
      var _this2 = this;

      var confirmText = this.props.confirmText,
          _state = this.state,
          openPanel = _state.openPanel,
          range = _state.range,
          actived = _state.actived,
          selected = _state.selected;

      var weekPicker = void 0;

      // 打开面板的时候才渲染
      if (openPanel) {
        var isDisabled = this.isDisabled(_utils.CURRENT_DAY);
        var linkCls = (0, _classnames2['default'])({
          'link--current': true,
          'link--disabled': isDisabled
        });

        var weekPickerCls = (0, _classnames2['default'])({
          'week-picker': true,
          small: this.isfooterShow
        });

        weekPicker = _react2['default'].createElement(
          'div',
          { className: weekPickerCls, ref: function ref(_ref2) {
              return _this2.picker = _ref2;
            } },
          _react2['default'].createElement(
            'div',
            { onMouseOut: this.onMouseOut },
            _react2['default'].createElement(_DatePanel2['default'], {
              range: range,
              actived: actived,
              selected: selected,
              disabledDate: this.isDisabled,
              onHover: this.onHover,
              onSelect: this.onSelectDate,
              onChange: this.onChangeDate,
              onPrev: this.onChangeMonth('prev'),
              onNext: this.onChangeMonth('next'),
              i18n: i18n
            })
          ),
          this.isfooterShow ? _react2['default'].createElement(_PanelFooter2['default'], {
            buttonText: confirmText || i18n.confirm,
            onClickButton: this.onConfirm,
            linkText: i18n.current.week,
            linkCls: linkCls,
            showLink: !isDisabled,
            onClickLink: function onClickLink() {
              return _this2.onSelectDate(_utils.CURRENT_DAY);
            }
          }) : null
        );
      }

      return weekPicker;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          name = _props.name,
          placeholder = _props.placeholder,
          popPosition = _props.popPosition,
          prefix = _props.prefix,
          width = _props.width,
          _state2 = this.state,
          openPanel = _state2.openPanel,
          showPlaceholder = _state2.showPlaceholder,
          value = _state2.value;


      var wrapperCls = prefix + '-datetime-picker ' + className;
      var inputCls = (0, _classnames2['default'])({
        'picker-input': true,
        'picker-input--filled': !showPlaceholder,
        'picker-input--disabled': disabled
      });
      var widthStyle = (0, _getWidth2['default'])(width);

      return _react2['default'].createElement(
        'div',
        { style: widthStyle, className: wrapperCls },
        _react2['default'].createElement(
          _i18n.I18nReceiver,
          { componentName: 'TimePicker', defaultI18n: _default.TimePicker },
          function (i18n) {
            return _react2['default'].createElement(
              _popover2['default'],
              {
                cushion: 5,
                visible: openPanel,
                onVisibleChange: _this3.togglePicker,
                className: prefix + '-datetime-picker-popover ' + className + '-popover',
                position: _constants.popPositionMap[popPosition.toLowerCase()]
              },
              _react2['default'].createElement(
                _popover2['default'].Trigger.Click,
                null,
                _react2['default'].createElement(
                  'div',
                  {
                    style: widthStyle,
                    className: inputCls,
                    onClick: function onClick(evt) {
                      return evt.preventDefault();
                    }
                  },
                  _react2['default'].createElement(_input2['default'], {
                    name: name,
                    value: showPlaceholder ? placeholder || i18n.week : value.join(' ' + i18n.to + ' '),
                    onChange: _constants.noop,
                    disabled: disabled
                  }),
                  _react2['default'].createElement('span', { className: 'zenticon zenticon-calendar-o' }),
                  _react2['default'].createElement('span', {
                    onClick: _this3.onClearInput,
                    className: 'zenticon zenticon-close-circle'
                  })
                )
              ),
              _react2['default'].createElement(
                _popover2['default'].Content,
                null,
                _this3.renderPicker(i18n)
              )
            );
          }
        )
      );
    }
  }]);
  return WeekPicker;
}(_react.PureComponent || _react.Component);

WeekPicker.propTypes = (0, _extends3['default'])({}, _constants.commonPropTypes, {
  startDay: _propTypes2['default'].number
});
WeekPicker.defaultProps = (0, _extends3['default'])({}, _constants.commonProps, {
  placeholder: '',
  startDay: 1
});

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.retType = 'string';

  this.onChangeDate = function (val) {
    _this4.setState({
      actived: val
    });
  };

  this.onHover = function (val) {
    var startDay = _this4.props.startDay;

    var offset = val.getDay();
    var week = [(0, _utils.goDays)(val, -offset + startDay - 1), (0, _utils.goDays)(val, 7 + startDay - offset)];

    _this4.setState({
      range: week
    });
  };

  this.onSelectDate = function (val) {
    var _props2 = _this4.props,
        onClick = _props2.onClick,
        startDay = _props2.startDay;

    var week = getSelectedWeek(val, startDay);

    _this4.setState({
      selected: week
    }, function () {
      if (!_this4.isfooterShow) {
        _this4.onConfirm();
      }
    });

    onClick && onClick(week);
  };

  this.onChangeMonth = function (type) {
    var typeMap = {
      prev: -1,
      next: 1
    };

    return function () {
      var actived = _this4.state.actived;

      var acp = (0, _utils.goMonths)(actived, typeMap[type]);

      _this4.setState({
        actived: acp
      });
    };
  };

  this.onClearInput = function (evt) {
    evt.stopPropagation();
    _this4.props.onChange([]);
  };

  this.onMouseOut = function (evt) {
    evt.stopPropagation();
    _this4.setState({
      range: []
    });
  };

  this.onConfirm = function () {
    var selected = _this4.state.selected;
    var _props3 = _this4.props,
        format = _props3.format,
        onClose = _props3.onClose,
        onChange = _props3.onChange;


    if (selected.length === 0) {
      return;
    }

    var tmp = selected.slice();
    if (_this4.isDisabled(tmp[0] || _this4.isDisabled(tmp[1]))) return;

    var value = tmp.map(function (item) {
      return (0, _utils.formatDate)(item, format);
    });
    _this4.setState({
      value: value,
      openPanel: false,
      showPlaceholder: false,
      range: []
    });

    var ret = tmp.map(function (item) {
      return _this4.getReturnValue(item, format);
    });
    onChange(ret);
    onClose && onClose();
  };

  this.isDisabled = function (val) {
    var _props4 = _this4.props,
        disabledDate = _props4.disabledDate,
        min = _props4.min,
        max = _props4.max,
        format = _props4.format;


    if (disabledDate && disabledDate(val)) return true;
    if (min && val < (0, _utils.parseDate)(min, format)) return true;
    if (max && val > (0, _utils.parseDate)(max, format)) return true;

    return false;
  };

  this.togglePicker = function () {
    var _props5 = _this4.props,
        onOpen = _props5.onOpen,
        onClose = _props5.onClose,
        disabled = _props5.disabled;

    var openPanel = !_this4.state.openPanel;
    if (disabled) return;

    openPanel ? onOpen && onOpen() : onClose && onClose();
    _this4.setState({
      openPanel: openPanel
    });
  };
};

exports['default'] = WeekPicker;