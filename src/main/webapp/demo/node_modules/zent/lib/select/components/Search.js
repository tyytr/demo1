'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Search = function (_ref) {
  (0, _inherits3['default'])(Search, _ref);

  function Search(props) {
    (0, _classCallCheck3['default'])(this, Search);

    var _this = (0, _possibleConstructorReturn3['default'])(this, (Search.__proto__ || Object.getPrototypeOf(Search)).call(this, props));

    _this.changeHandler = _this.changeHandler.bind(_this);
    return _this;
  }

  (0, _createClass3['default'])(Search, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.input.focus();
    }
  }, {
    key: 'changeHandler',
    value: function changeHandler(ev) {
      this.props.onChange(ev.target.value);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          prefixCls = _props.prefixCls,
          placeholder = _props.placeholder,
          keyword = _props.keyword;


      return _react2['default'].createElement(
        'div',
        { className: prefixCls + '-search' },
        _react2['default'].createElement('input', {
          type: 'text',
          ref: function ref(input) {
            return _this2.input = input;
          },
          placeholder: placeholder,
          className: prefixCls + '-filter',
          value: keyword,
          onChange: this.changeHandler
        })
      );
    }
  }]);
  return Search;
}(_react.PureComponent || _react.Component);

Search.propTypes = {
  prefixCls: _propTypes2['default'].string,
  value: _propTypes2['default'].any,
  placeholder: _propTypes2['default'].string
};

exports['default'] = Search;