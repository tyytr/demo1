'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _getWidth = require('../utils/getWidth');

var _getWidth2 = _interopRequireDefault(_getWidth);

var _Textarea = require('./Textarea');

var _Textarea2 = _interopRequireDefault(_Textarea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Input = function (_ref) {
  (0, _inherits3['default'])(Input, _ref);

  function Input() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, Input);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref2 = Input.__proto__ || Object.getPrototypeOf(Input)).call.apply(_ref2, [this].concat(args))), _this), _this.handleKeyDown = function (evt) {
      var _this$props = _this.props,
          onKeyDown = _this$props.onKeyDown,
          onPressEnter = _this$props.onPressEnter;

      if (onPressEnter && evt.keyCode === 13) {
        onPressEnter(evt);
      }

      if (onKeyDown) onKeyDown(evt);
    }, _this.clearInput = function (evt) {
      var onChange = _this.props.onChange;


      (0, _isFunction2['default'])(onChange) && onChange({
        target: (0, _extends3['default'])({}, _this.props, {
          value: ''
        }),
        preventDefault: function preventDefault() {
          return evt.preventDefault();
        },
        stopPropagation: function stopPropagation() {
          return evt.stopPropagation();
        }
      });
    }, _this.retainInputFocus = function (evt) {
      evt.preventDefault();
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  (0, _createClass3['default'])(Input, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          autoFocus = _props.autoFocus,
          autoSelect = _props.autoSelect,
          initSelectionStart = _props.initSelectionStart,
          initSelectionEnd = _props.initSelectionEnd;


      if (autoFocus) {
        this.input.focus();
      }
      if (autoSelect) {
        this.select(initSelectionStart, initSelectionEnd);
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: 'select',
    value: function select(selectioinStart, selectionEnd) {
      if ((0, _isNumber2['default'])(selectioinStart) && (0, _isNumber2['default'])(selectionEnd)) {
        this.input.setSelectionRange(selectioinStart, selectionEnd);
      } else {
        this.input.select();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames,
          _this2 = this;

      var _props2 = this.props,
          addonBefore = _props2.addonBefore,
          addonAfter = _props2.addonAfter,
          prefix = _props2.prefix,
          className = _props2.className,
          type = _props2.type,
          onChange = _props2.onChange,
          value = _props2.value,
          showClear = _props2.showClear,
          width = _props2.width,
          disabled = _props2.disabled,
          readOnly = _props2.readOnly;

      var widthStyle = (0, _getWidth2['default'])(width);
      var isTextarea = type.toLowerCase() === 'textarea';
      var editable = !(disabled || readOnly);

      var wrapClass = (0, _classnames2['default'])((_classNames = {}, (0, _defineProperty3['default'])(_classNames, prefix + '-input-wrapper', true), (0, _defineProperty3['default'])(_classNames, prefix + '-input-wrapper__not-editable', !editable), (0, _defineProperty3['default'])(_classNames, prefix + '-textarea-wrapper', isTextarea), (0, _defineProperty3['default'])(_classNames, prefix + '-input-addons', !isTextarea && (addonAfter || addonBefore)), _classNames), className);

      // 黑名单，下面这些props不应该带入到Input上
      var inputProps = (0, _omit2['default'])(this.props, ['className', 'prefix', 'addonBefore', 'addonAfter', 'onPressEnter', 'width', 'showClear', 'autoSelect', 'initSelectionStart', 'initSelectionEnd']);

      if (isTextarea) {
        return _react2['default'].createElement(_Textarea2['default'], {
          wrapClass: wrapClass,
          widthStyle: widthStyle,
          prefix: prefix,
          handleKeyDown: this.handleKeyDown,
          inputProps: inputProps,
          inputRef: this
        });
      }

      return _react2['default'].createElement(
        'div',
        { className: wrapClass, style: widthStyle },
        addonBefore && _react2['default'].createElement(
          'span',
          { className: prefix + '-input-addon-before' },
          addonBefore
        ),
        _react2['default'].createElement('input', (0, _extends3['default'])({
          ref: function ref(input) {
            _this2.input = input;
          },
          className: prefix + '-input'
        }, inputProps, {
          value: value,
          onKeyDown: this.handleKeyDown
        })),
        (0, _isFunction2['default'])(onChange) && showClear && value && _react2['default'].createElement(_icon2['default'], {
          type: 'close-circle',
          onClick: this.clearInput,
          onMouseDown: this.retainInputFocus
        }),
        addonAfter && _react2['default'].createElement(
          'span',
          { className: prefix + '-input-addon-after' },
          addonAfter
        )
      );
    }
  }]);
  return Input;
}(_react.PureComponent || _react.Component);

Input.propTypes = {
  className: _propTypes2['default'].string,
  prefix: _propTypes2['default'].string,
  type: _propTypes2['default'].string,
  placeholder: _propTypes2['default'].string,
  disabled: _propTypes2['default'].bool,
  readOnly: _propTypes2['default'].bool,
  value: _propTypes2['default'].any,
  defaultValue: _propTypes2['default'].any,
  addonBefore: _propTypes2['default'].node,
  addonAfter: _propTypes2['default'].node,
  onPressEnter: _propTypes2['default'].func,
  showCount: _propTypes2['default'].bool,
  showClear: _propTypes2['default'].bool,
  autoSize: _propTypes2['default'].bool,
  onChange: _propTypes2['default'].func,
  autoFocus: _propTypes2['default'].bool,
  initSelectionStart: _propTypes2['default'].number,
  initSelectionEnd: _propTypes2['default'].number,
  autoSelect: _propTypes2['default'].bool,
  width: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number])
};
Input.defaultProps = {
  disabled: false,
  readOnly: false,
  prefix: 'zent',
  type: 'text',
  autoFocus: false,
  autoSelect: false,
  showClear: false
};
exports['default'] = Input;