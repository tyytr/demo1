'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pop = require('../../pop');

var _pop2 = _interopRequireDefault(_pop);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _reactBeautifulDnd = require('react-beautiful-dnd');

var _constants = require('./constants');

var _constants2 = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var DesignPreviewController = function (_ref) {
  (0, _inherits3['default'])(DesignPreviewController, _ref);

  function DesignPreviewController() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, DesignPreviewController);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref2 = DesignPreviewController.__proto__ || Object.getPrototypeOf(DesignPreviewController)).call.apply(_ref2, [this].concat(args))), _this), _this.onSelect = function (evt) {
      var editable = _this.props.editable;

      if (!editable) {
        return;
      }

      _this.invokeCallback('onSelect', evt, false);
    }, _this.onPrepend = function (evt) {
      _this.invokeCallback('onAdd', evt, true, _constants2.ADD_COMPONENT_OVERLAY_POSITION.TOP);
    }, _this.onAppend = function (evt) {
      _this.invokeCallback('onAdd', evt, true, _constants2.ADD_COMPONENT_OVERLAY_POSITION.BOTTOM);
    }, _this.onDelete = function () {
      _this.invokeCallback('onDelete', null, true);
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  (0, _createClass3['default'])(DesignPreviewController, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          dragable = _props.dragable,
          configurable = _props.configurable,
          editable = _props.editable,
          canDelete = _props.canDelete,
          canInsert = _props.canInsert,
          highlightWhenSelect = _props.highlightWhenSelect,
          isSelected = _props.isSelected,
          PreviewComponent = _props.component,
          previewProps = _props.previewProps,
          prefix = _props.prefix,
          id = _props.id,
          allowHoverEffects = _props.allowHoverEffects;

      var props = (0, _pick2['default'])(this.props, ['value', 'design', 'globalConfig', 'settings']);
      var getClassName = function getClassName(highlight) {
        var _cx;

        return (0, _classnames2['default'])(prefix + '-design-preview-controller', (_cx = {}, (0, _defineProperty3['default'])(_cx, prefix + '-design-preview-controller--editable', editable), (0, _defineProperty3['default'])(_cx, prefix + '-design-preview-controller--selected', isSelected), (0, _defineProperty3['default'])(_cx, prefix + '-design-preview-controller--highlight', highlight), (0, _defineProperty3['default'])(_cx, prefix + '-design-preview-controller--dragable', dragable), _cx));
      };

      var tree = dragable ? _react2['default'].createElement(
        _reactBeautifulDnd.Draggable,
        {
          draggableId: id,
          type: _constants.DND_PREVIEW_CONTROLLER,
          isDragDisabled: !dragable
        },
        function (provided, snapshot) {
          // 拖拽的时候隐藏各种按钮，会很丑
          var showButtons = configurable && allowHoverEffects && !snapshot.isDragging;
          var onClick = function onClick(evt) {
            if (provided.dragHandleProps) {
              provided.dragHandleProps.onClick(evt);
            }

            _this2.onSelect(evt);
          };
          var cls = getClassName(allowHoverEffects && highlightWhenSelect);

          return _react2['default'].createElement(
            'div',
            { className: cls, onClick: onClick },
            _react2['default'].createElement(
              'div',
              (0, _extends3['default'])({
                ref: provided.innerRef,
                style: provided.draggableStyle,
                className: prefix + '-design-preview-controller__drag-handle'
              }, provided.dragHandleProps),
              _react2['default'].createElement(PreviewComponent, (0, _extends3['default'])({
                prefix: prefix
              }, previewProps, props))
            ),
            provided.placeholder,
            showButtons && canDelete && _react2['default'].createElement(DeleteButton, { prefix: prefix, onDelete: _this2.onDelete }),
            showButtons && canInsert && _react2['default'].createElement(AddButton, {
              prefix: prefix,
              onAdd: _this2.onPrepend,
              className: prefix + '-design-preview-controller__prepend'
            }),
            showButtons && canInsert && _react2['default'].createElement(AddButton, {
              prefix: prefix,
              onAdd: _this2.onAppend,
              className: prefix + '-design-preview-controller__append'
            })
          );
        }
      ) : _react2['default'].createElement(
        'div',
        {
          className: getClassName(highlightWhenSelect),
          onClick: this.onSelect
        },
        _react2['default'].createElement(
          'div',
          {
            className: (0, _classnames2['default'])(prefix + '-design-preview-controller__drag-handle', prefix + '-design-preview-controller__drag-handle--inactive')
          },
          _react2['default'].createElement(PreviewComponent, (0, _extends3['default'])({ prefix: prefix }, previewProps, props))
        ),
        configurable && canDelete && _react2['default'].createElement(DeleteButton, { prefix: prefix, onDelete: this.onDelete }),
        configurable && canInsert && _react2['default'].createElement(AddButton, {
          prefix: prefix,
          onAdd: this.onPrepend,
          className: prefix + '-design-preview-controller__prepend'
        }),
        configurable && canInsert && _react2['default'].createElement(AddButton, {
          prefix: prefix,
          onAdd: this.onAppend,
          className: prefix + '-design-preview-controller__append'
        })
      );

      return tree;
    }
  }, {
    key: 'invokeCallback',
    value: function invokeCallback(action, evt, stopPropagation) {
      if (stopPropagation && evt) {
        evt.stopPropagation();
      }

      var value = this.props.value;

      var cb = this.props[action];

      for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        args[_key2 - 3] = arguments[_key2];
      }

      cb && cb.apply(undefined, [value].concat(args));
    }
  }]);
  return DesignPreviewController;
}(_react.PureComponent || _react.Component);

DesignPreviewController.propTypes = {
  // 这个组件的唯一标示，不随位置变化而变化
  id: _propTypes2['default'].string.isRequired,

  // 是否允许 hover 效果，不允许的话不会显示各种按钮
  // 拖拽的时候用
  allowHoverEffects: _propTypes2['default'].bool.isRequired,

  // 是否可以编辑，UMP里面有些地方config是不能编辑的
  editable: _propTypes2['default'].bool,

  // 组件是否可以拖拽
  dragable: _propTypes2['default'].bool,

  // 是否显示右下角的编辑区域
  configurable: _propTypes2['default'].bool,

  // 时候现实删除按钮
  canDelete: _propTypes2['default'].bool,

  // 是否吸纳事添加组件按钮
  canInsert: _propTypes2['default'].bool,

  // 选中时是否高亮
  highlightWhenSelect: _propTypes2['default'].bool,

  // 当前是否选中
  isSelected: _propTypes2['default'].bool.isRequired,

  // 这个组件对应的值
  value: _propTypes2['default'].object.isRequired,

  // Design 组件的全局配置
  settings: _propTypes2['default'].object,

  // 选中的会掉函数
  onSelect: _propTypes2['default'].func.isRequired,

  // 编辑的回调函数
  onEdit: _propTypes2['default'].func.isRequired,

  // 添加新组件的回调函数
  onAdd: _propTypes2['default'].func.isRequired,

  // 删除组件的回调函数
  onDelete: _propTypes2['default'].func.isRequired,

  // 拖拽时移动组件的回调函数
  onMove: _propTypes2['default'].func.isRequired,

  // design 组件暴露的方法
  design: _propTypes2['default'].object.isRequired,

  // 用来渲染预览的组件
  component: _propTypes2['default'].func.isRequired,

  // 自定义配置
  globalConfig: _propTypes2['default'].object,

  // preview 额外的 props
  previewProps: _propTypes2['default'].object,

  prefix: _propTypes2['default'].string
};
DesignPreviewController.defaultProps = {
  prefix: 'zent'
};


function DeleteButton(_ref3) {
  var prefix = _ref3.prefix,
      onDelete = _ref3.onDelete;

  return _react2['default'].createElement(
    _pop2['default'],
    {
      content: '\u786E\u5B9A\u5220\u9664\uFF1F',
      trigger: 'click',
      position: 'left-center',
      centerArrow: true,
      onConfirm: onDelete,
      wrapperClassName: prefix + '-design-preview-controller__action-btn-delete'
    },
    _react2['default'].createElement(IconDelete, { prefix: prefix, onClick: stopEventPropagation })
  );
}

function AddButton(_ref4) {
  var prefix = _ref4.prefix,
      onAdd = _ref4.onAdd,
      className = _ref4.className;

  return _react2['default'].createElement(
    'div',
    {
      className: (0, _classnames2['default'])(prefix + '-design-preview-controller__action-btn-add-container', className)
    },
    _react2['default'].createElement(
      'a',
      {
        className: prefix + '-design-preview-controller__action-btn-add',
        onClick: onAdd
      },
      _react2['default'].createElement(IconAdd, { prefix: prefix })
    ),
    _react2['default'].createElement(AddMarker, { prefix: prefix })
  );
}

function AddMarker(_ref5) {
  var prefix = _ref5.prefix;

  return _react2['default'].createElement(
    'div',
    { className: prefix + '-design-preview-controller__add-marker' },
    _react2['default'].createElement('i', {
      className: (0, _classnames2['default'])(prefix + '-design-preview-controller__add-marker-circle', prefix + '-design-preview-controller__add-marker-circle--left')
    }),
    _react2['default'].createElement('div', { className: prefix + '-design-preview-controller__add-marker-line' }),
    _react2['default'].createElement('i', {
      className: (0, _classnames2['default'])(prefix + '-design-preview-controller__add-marker-circle', prefix + '-design-preview-controller__add-marker-circle--right')
    })
  );
}

function IconAdd(_ref6) {
  var prefix = _ref6.prefix;

  return _react2['default'].createElement(
    'svg',
    {
      width: '17',
      height: '17',
      viewBox: '0 0 17 17',
      xmlns: 'http://www.w3.org/2000/svg',
      className: prefix + '-design-preview-controller__icon-add'
    },
    _react2['default'].createElement(
      'g',
      { fill: 'none', fillRule: 'evenodd' },
      _react2['default'].createElement('circle', { cx: '8.5', cy: '8.5', r: '8.5' }),
      _react2['default'].createElement('path', { d: 'M8 8H5v1h3v3h1V9h3V8H9V5H8v3z', fill: '#FFF' })
    )
  );
}

var IconDelete = function (_ref7) {
  (0, _inherits3['default'])(IconDelete, _ref7);

  function IconDelete() {
    (0, _classCallCheck3['default'])(this, IconDelete);
    return (0, _possibleConstructorReturn3['default'])(this, (IconDelete.__proto__ || Object.getPrototypeOf(IconDelete)).apply(this, arguments));
  }

  (0, _createClass3['default'])(IconDelete, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          prefix = _props2.prefix,
          onClick = _props2.onClick;

      return _react2['default'].createElement(
        'svg',
        {
          width: '20',
          height: '20',
          viewBox: '0 0 20 20',
          xmlns: 'http://www.w3.org/2000/svg',
          className: prefix + '-design-preview-controller__icon-delete',
          onClick: onClick
        },
        _react2['default'].createElement(
          'g',
          { fill: 'none', fillRule: 'evenodd' },
          _react2['default'].createElement('circle', { cx: '10', cy: '10', r: '10' }),
          _react2['default'].createElement('path', {
            fill: '#FFF',
            d: 'M13.75 7.188l-.937-.938L10 9.063 7.188 6.25l-.938.937L9.062 10 6.25 12.812l.937.938L10 10.938l2.812 2.812.938-.937L10.938 10'
          })
        )
      );
    }
  }]);
  return IconDelete;
}(_react.PureComponent || _react.Component);

function stopEventPropagation(evt) {
  evt && evt.stopPropagation();
}

exports['default'] = DesignPreviewController;