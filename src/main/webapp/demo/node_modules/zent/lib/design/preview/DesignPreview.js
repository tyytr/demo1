'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _some = require('lodash/some');

var _some2 = _interopRequireDefault(_some);

var _defaultTo = require('lodash/defaultTo');

var _defaultTo2 = _interopRequireDefault(_defaultTo);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _reactBeautifulDnd = require('react-beautiful-dnd');

var _DesignPreviewItem = require('./DesignPreviewItem');

var _DesignPreviewItem2 = _interopRequireDefault(_DesignPreviewItem);

var _DesignPreviewController = require('./DesignPreviewController');

var _DesignPreviewController2 = _interopRequireDefault(_DesignPreviewController);

var _DesignEditorItem = require('../editor/DesignEditorItem');

var _DesignEditorItem2 = _interopRequireDefault(_DesignEditorItem);

var _DesignEditorAddComponent = require('../editor/DesignEditorAddComponent');

var _DesignEditorAddComponent2 = _interopRequireDefault(_DesignEditorAddComponent);

var _designType = require('../utils/design-type');

var _componentGroup = require('../utils/component-group');

var _constants = require('./constants');

var _constants2 = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * DesignPreview 和 config 组件是相互关联的
 *
 * 这个组件里的一些 props 是需要 config 组件提供的
 */
var DesignPreview = function (_ref) {
  (0, _inherits3['default'])(DesignPreview, _ref);

  function DesignPreview() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, DesignPreview);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref2 = DesignPreview.__proto__ || Object.getPrototypeOf(DesignPreview)).call.apply(_ref2, [this].concat(args))), _this), _this.previewItems = {}, _this.editorItems = {}, _this.editors = {}, _this.dispatchDragEnd = function (result) {
      var type = result.type;

      if (type === _constants.DND_PREVIEW_CONTROLLER) {
        _this.onPreviewDragEnd(result);
        return;
      }

      // Let editors handle their dnd actions
      (0, _some2['default'])(_this.editors, function (editor) {
        if ((0, _isFunction2['default'])(editor.shouldHandleDragEnd) && editor.shouldHandleDragEnd(type)) {
          (0, _isFunction2['default'])(editor.onDragEnd) && editor.onDragEnd(result);
          return true;
        }

        return false;
      });
    }, _this.savePreviewItem = function (id) {
      return function (instance) {
        saveRef(_this.previewItems, id, instance);
      };
    }, _this.saveEditorItem = function (id) {
      return function (instance) {
        saveRef(_this.editorItems, id, instance);
      };
    }, _this.saveEditor = function (id) {
      return function (instance) {
        saveRef(_this.editors, id, instance);
      };
    }, _this.scrollToItem = function (id, offsets) {
      var item = _this.previewItems[id];

      if (!item) {
        return;
      }

      item.scrollTop(offsets);
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }
  // All props in this component are injected by Design


  (0, _createClass3['default'])(DesignPreview, [{
    key: 'render',
    value: function render() {
      var _this2 = this,
          _cx3;

      var _props = this.props,
          components = _props.components,
          value = _props.value,
          validations = _props.validations,
          showError = _props.showError,
          settings = _props.settings,
          onSettingsChange = _props.onSettingsChange,
          onComponentValueChange = _props.onComponentValueChange,
          componentInstanceCount = _props.componentInstanceCount,
          design = _props.design,
          appendableComponents = _props.appendableComponents,
          showAddComponentOverlay = _props.showAddComponentOverlay,
          addComponentOverlayPosition = _props.addComponentOverlayPosition,
          selectedUUID = _props.selectedUUID,
          getUUIDFromValue = _props.getUUIDFromValue,
          onAddComponent = _props.onAddComponent,
          onSelect = _props.onSelect,
          onDelete = _props.onDelete,
          onEdit = _props.onEdit,
          onAdd = _props.onAdd,
          onMove = _props.onMove,
          className = _props.className,
          prefix = _props.prefix,
          globalConfig = _props.globalConfig,
          disabled = _props.disabled,
          footer = _props.footer;

      var isComponentsGrouped = (0, _componentGroup.isGrouped)(appendableComponents);
      var cls = (0, _classnames2['default'])(prefix + '-design-preview', className);
      var hasAppendableComponent = appendableComponents.length > 0;

      return _react2['default'].createElement(
        _reactBeautifulDnd.DragDropContext,
        { onDragEnd: this.dispatchDragEnd },
        _react2['default'].createElement(
          'div',
          {
            className: cls,
            style: {
              background: (0, _get2['default'])(settings, 'previewBackground', _constants.DEFAULT_BACKGROUND)
            }
          },
          disabled && _react2['default'].createElement('div', { className: prefix + '-design__disabled-mask' }),
          _react2['default'].createElement(
            _reactBeautifulDnd.Droppable,
            {
              droppableId: prefix + '-design-preview-list',
              type: _constants.DND_PREVIEW_CONTROLLER,
              direction: 'vertical'
            },
            function (provided, snapshot) {
              return _react2['default'].createElement(
                'div',
                {
                  ref: provided.innerRef,
                  className: (0, _classnames2['default'])(prefix + '-design__item-list', (0, _defineProperty3['default'])({}, prefix + '-design__item-list--full-height', !hasAppendableComponent))
                },
                value.map(function (v) {
                  var _cx2;

                  var valueType = v.type;
                  var comp = (0, _find2['default'])(components, function (c) {
                    return (0, _designType.isExpectedDesginType)(c, valueType);
                  });
                  var PreviewItem = comp.previewItem || _DesignPreviewItem2['default'];
                  var EditorItem = comp.editorItem || _DesignEditorItem2['default'];
                  var id = getUUIDFromValue(v);
                  var selected = id === selectedUUID;
                  var PreviewController = comp.previewController || _DesignPreviewController2['default'];

                  return _react2['default'].createElement(
                    PreviewItem,
                    {
                      prefix: prefix,
                      key: id,
                      id: id,
                      ref: _this2.savePreviewItem(id)
                    },
                    _react2['default'].createElement(PreviewController, {
                      prefix: prefix,
                      value: v,
                      globalConfig: globalConfig,
                      settings: settings,
                      design: design,
                      id: id,
                      allowHoverEffects: !snapshot.isDraggingOver,
                      dragable: (0, _defaultTo2['default'])(comp.dragable, true),
                      editable: (0, _defaultTo2['default'])(comp.editable, true),
                      configurable: (0, _defaultTo2['default'])(comp.configurable, true),
                      canDelete: (0, _defaultTo2['default'])(comp.canDelete, true),
                      canInsert: (0, _defaultTo2['default'])(comp.canInsert, true),
                      highlightWhenSelect: (0, _defaultTo2['default'])(comp.highlightWhenSelect, true),
                      isSelected: selected,
                      onSelect: onSelect,
                      onDelete: onDelete,
                      onEdit: onEdit,
                      onAdd: onAdd,
                      onMove: onMove,
                      component: comp.preview,
                      previewProps: getAdditionalProps(comp.previewProps, v)
                    }),
                    selected && !showAddComponentOverlay && _react2['default'].createElement(
                      EditorItem,
                      {
                        prefix: prefix,
                        disabled: disabled,
                        ref: _this2.saveEditorItem(id)
                      },
                      _react2['default'].createElement(comp.editor, (0, _extends3['default'])({}, getAdditionalProps(comp.editorProps, v), {
                        ref: _this2.saveEditor(id),
                        value: v,
                        onChange: onComponentValueChange(v),
                        settings: settings,
                        onSettingsChange: onSettingsChange,
                        globalConfig: globalConfig,
                        design: design,
                        validation: validations[id] || {},
                        showError: showError,
                        prefix: prefix
                      }))
                    ),
                    selected && showAddComponentOverlay && _react2['default'].createElement(
                      _DesignEditorItem2['default'],
                      {
                        ref: _this2.saveEditorItem(id),
                        prefix: prefix,
                        className: (0, _classnames2['default'])(prefix + '-design-add-component-overlay', (_cx2 = {}, (0, _defineProperty3['default'])(_cx2, prefix + '-design-add-component-overlay--top', addComponentOverlayPosition === _constants2.ADD_COMPONENT_OVERLAY_POSITION.TOP), (0, _defineProperty3['default'])(_cx2, prefix + '-design-add-component-overlay--bottom', addComponentOverlayPosition === _constants2.ADD_COMPONENT_OVERLAY_POSITION.BOTTOM), (0, _defineProperty3['default'])(_cx2, prefix + '-design-add-component-overlay--grouped', isComponentsGrouped), (0, _defineProperty3['default'])(_cx2, prefix + '-design-add-component-overlay--mixed', !isComponentsGrouped), _cx2))
                      },
                      _react2['default'].createElement(_DesignEditorAddComponent2['default'], {
                        prefix: prefix,
                        fromSelected: true,
                        componentInstanceCount: componentInstanceCount,
                        components: appendableComponents,
                        onAddComponent: onAddComponent
                      })
                    )
                  );
                }),
                provided.placeholder
              );
            }
          ),
          hasAppendableComponent && _react2['default'].createElement(
            'div',
            {
              className: (0, _classnames2['default'])(prefix + '-design__add', (_cx3 = {}, (0, _defineProperty3['default'])(_cx3, prefix + '-design__add--grouped', isComponentsGrouped), (0, _defineProperty3['default'])(_cx3, prefix + '-design__add--mixed', !isComponentsGrouped), _cx3))
            },
            _react2['default'].createElement(_DesignEditorAddComponent2['default'], {
              prefix: prefix,
              componentInstanceCount: componentInstanceCount,
              components: appendableComponents,
              onAddComponent: onAddComponent
            })
          ),
          footer
        )
      );
    }
  }, {
    key: 'onPreviewDragEnd',
    value: function onPreviewDragEnd(result) {
      var source = result.source,
          destination = result.destination;

      // dropped outside

      if (!destination) {
        return;
      }

      var onMove = this.props.onMove;

      onMove(source.index, destination.index);
    }
  }, {
    key: 'getEditorBoundingBox',
    value: function getEditorBoundingBox(id) {
      var item = this.editorItems[id];

      if (!item) {
        return;
      }

      return item.getBoundingBox();
    }
  }]);
  return DesignPreview;
}(_react.PureComponent || _react.Component);

DesignPreview.propTypes = {
  className: _propTypes2['default'].string,

  prefix: _propTypes2['default'].string,

  design: _propTypes2['default'].object.isRequired,

  components: _propTypes2['default'].array.isRequired,

  value: _propTypes2['default'].array.isRequired,

  settings: _propTypes2['default'].object,

  onSettingsChange: _propTypes2['default'].func,

  footer: _propTypes2['default'].node,

  appendableComponents: _propTypes2['default'].array,

  showAddComponentOverlay: _propTypes2['default'].bool.isRequired,

  addComponentOverlayPosition: _propTypes2['default'].number.isRequired,

  selectedUUID: _propTypes2['default'].string,

  getUUIDFromValue: _propTypes2['default'].func.isRequired,

  onSelect: _propTypes2['default'].func.isRequired,

  // 处理添加按钮的回调函数
  onAdd: _propTypes2['default'].func.isRequired,

  // 添加新组件
  onAddComponent: _propTypes2['default'].func.isRequired,

  onDelete: _propTypes2['default'].func.isRequired,

  onEdit: _propTypes2['default'].func.isRequired,

  onMove: _propTypes2['default'].func.isRequired,

  disabled: _propTypes2['default'].bool,

  // 每个组件的实例数量
  componentInstanceCount: _propTypes2['default'].object,

  // 以下 props 由 config 组件提供
  background: _propTypes2['default'].string
};
DesignPreview.defaultProps = {
  background: '#f9f9f9',
  disabled: false,
  appendableComponents: [],
  prefix: 'zent'
};


function getAdditionalProps(propsOrFn, value) {
  var props = (0, _isFunction2['default'])(propsOrFn) ? propsOrFn(value) : propsOrFn;

  return props || {};
}

function saveRef(map, id, instance) {
  if (!instance) {
    delete map[id];
  } else {
    map[id] = instance;
  }
}

exports['default'] = DesignPreview;