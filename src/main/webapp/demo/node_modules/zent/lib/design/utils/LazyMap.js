'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var LazyMap = function () {
  function LazyMap(defaultValue) {
    var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3['default'])(this, LazyMap);

    this.defaultValue = defaultValue;
    this.map = map;
  }

  (0, _createClass3['default'])(LazyMap, [{
    key: 'get',
    value: function get(key) {
      if ((0, _has3['default'])(this.map, key)) {
        return this.map[key];
      }

      return this.defaultValue;
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      this.map[key] = value;
      return this;
    }
  }, {
    key: 'clone',
    value: function clone() {
      return new LazyMap(this.defaultValue, this.map);
    }
  }, {
    key: 'has',
    value: function has(key) {
      return (0, _has3['default'])(this.map, key);
    }

    /* Use this iff value is a number */

  }, {
    key: 'inc',
    value: function inc(key) {
      var oldValue = this.get(key);
      this.set(key, oldValue + 1);
      return this;
    }

    /* Use this iff value is a number */

  }, {
    key: 'dec',
    value: function dec(key) {
      var oldValue = this.get(key);
      this.set(key, oldValue - 1);
      return this;
    }
  }]);
  return LazyMap;
}(); /**
      * A lazy map with default value.
      *
      * If most of the entries in your map defaults to the same value, you can use LazyMap to save memory.
      */


exports['default'] = LazyMap;