'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactcss = require('./helpers/reactcss');

var _reactcss2 = _interopRequireDefault(_reactcss);

var _color = require('./helpers/color');

var _color2 = _interopRequireDefault(_color);

var _common = require('./common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var SketchFileds = function (_ref) {
  (0, _inherits3['default'])(SketchFileds, _ref);

  function SketchFileds() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, SketchFileds);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref2 = SketchFileds.__proto__ || Object.getPrototypeOf(SketchFileds)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      hexColor: _this.props.hex.replace('#', '')
    }, _this.confirmHexChange = function (e) {
      var onChange = _this.props.onChange;
      var hexColor = _this.state.hexColor;

      _color2['default'].isValidHex(hexColor) && onChange({
        hex: hexColor,
        source: 'hex'
      }, e);
    }, _this.handleHexChange = function (data) {
      _this.setState({
        hexColor: data.hex
      });
    }, _this.handleChange = function (data, e) {
      var _this$props = _this.props,
          rgb = _this$props.rgb,
          hsl = _this$props.hsl,
          onChange = _this$props.onChange;


      if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          a: rgb.a,
          source: 'rgb'
        }, e);
      } else if (data.a) {
        if (data.a < 0) {
          data.a = 0;
        } else if (data.a > 100) {
          data.a = 100;
        }

        data.a = data.a / 100;
        onChange({
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a: data.a,
          source: 'rgb'
        }, e);
      }
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  (0, _createClass3['default'])(SketchFileds, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextHexColor = nextProps.hex.replace('#', '');
      if (this.state.hexColor !== nextHexColor) {
        this.setState({
          hexColor: nextHexColor
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          prefix = _props.prefix,
          rgb = _props.rgb;
      var hexColor = this.state.hexColor;

      var styles = this.styles;
      return _react2['default'].createElement(
        'div',
        { style: styles.fields, className: prefix + '-colorpicker-input' },
        _react2['default'].createElement(
          'div',
          { style: styles.double },
          _react2['default'].createElement(_common.EditableInput, {
            style: { input: styles.input, label: styles.label },
            label: 'hex',
            value: hexColor,
            onBlur: this.confirmHexChange,
            onPressEnter: this.confirmHexChange,
            onChange: this.handleHexChange
          })
        ),
        _react2['default'].createElement(
          'div',
          { style: styles.single },
          _react2['default'].createElement(_common.EditableInput, {
            style: { input: styles.input, label: styles.label },
            label: 'r',
            value: rgb.r,
            onChange: this.handleChange,
            dragMax: '255'
          })
        ),
        _react2['default'].createElement(
          'div',
          { style: styles.single },
          _react2['default'].createElement(_common.EditableInput, {
            style: { input: styles.input, label: styles.label },
            label: 'g',
            value: rgb.g,
            onChange: this.handleChange,
            dragMax: '255'
          })
        ),
        _react2['default'].createElement(
          'div',
          { style: styles.single },
          _react2['default'].createElement(_common.EditableInput, {
            style: { input: styles.input, label: styles.label },
            label: 'b',
            value: rgb.b,
            onChange: this.handleChange,
            dragMax: '255'
          })
        ),
        _react2['default'].createElement(
          'div',
          { style: styles.alpha },
          _react2['default'].createElement(_common.EditableInput, {
            style: { input: styles.input, label: styles.label },
            label: 'a',
            value: Math.round(rgb.a * 100),
            onChange: this.handleChange,
            dragMax: '100'
          })
        )
      );
    }
  }, {
    key: 'styles',
    get: function get() {
      var showAlpha = this.props.showAlpha;


      return (0, _reactcss2['default'])({
        'default': {
          fields: {
            display: 'flex',
            paddingTop: '4px'
          },
          single: {
            flex: '1',
            paddingLeft: '6px'
          },
          alpha: {
            flex: '1',
            paddingLeft: '6px'
          },
          double: {
            flex: '2'
          },
          input: {
            width: '80%',
            padding: '4px 10% 3px',
            border: 'none',
            boxShadow: 'inset 0 0 0 1px #ccc',
            fontSize: '11px'
          },
          label: {
            display: 'block',
            textAlign: 'center',
            fontSize: '11px',
            color: '#222',
            paddingTop: '3px',
            paddingBottom: '4px',
            textTransform: 'capitalize'
          }
        },
        showAlpha: {
          alpha: {
            display: 'none'
          }
        }
      }, { showAlpha: !showAlpha });
    }
  }]);
  return SketchFileds;
}(_react.PureComponent || _react.Component);

exports['default'] = SketchFileds;