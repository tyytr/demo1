'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Trigger2 = require('./Trigger');

var _Trigger3 = _interopRequireDefault(_Trigger2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var PopoverClickTrigger = function (_Trigger) {
  (0, _inherits3['default'])(PopoverClickTrigger, _Trigger);

  function PopoverClickTrigger() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, PopoverClickTrigger);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, (_ref = PopoverClickTrigger.__proto__ || Object.getPrototypeOf(PopoverClickTrigger)).call.apply(_ref, [this].concat(args))), _this), _this.onClickOutside = function (evt) {
      // Optimization: skip checking if popover is hidden
      var contentVisible = _this.props.contentVisible;

      if (!contentVisible) {
        return;
      }

      var target = evt.target;

      if (_this.props.isOutsideStacked(target)) {
        _this.props.close();
      }
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  (0, _createClass3['default'])(PopoverClickTrigger, [{
    key: 'getTriggerProps',
    value: function getTriggerProps(child) {
      var _this2 = this;

      return {
        onClick: function onClick(evt) {
          _this2.props.open();
          _this2.triggerEvent(child, 'onClick', evt);
        }
      };
    }
  }, {
    key: 'bindEventHandler',
    value: function bindEventHandler(props) {
      var _ref2 = props || this.props,
          contentVisible = _ref2.contentVisible,
          autoClose = _ref2.autoClose;

      // bind global events only when popover is visible


      if (autoClose && contentVisible) {
        return window.addEventListener('click', this.onClickOutside, true);
      }

      // Ensure handler is removed even if autoClose is false
      if (!contentVisible) {
        return window.removeEventListener('click', this.onClickOutside, true);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('click', this.onClickOutside, true);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.bindEventHandler();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var contentVisible = nextProps.contentVisible;

      if (contentVisible !== this.props.contentVisible) {
        this.bindEventHandler(nextProps);
      }
    }
  }]);
  return PopoverClickTrigger;
}(_Trigger3['default']);

PopoverClickTrigger.propTypes = (0, _extends3['default'])({}, _Trigger2.PopoverTriggerPropTypes, {

  // click anywhere outside to close
  // If set to false, you have to close popover manually
  autoClose: _propTypes2['default'].bool,

  // Optional click outside check
  // (target) => boolean
  isOutside: _propTypes2['default'].func
});
PopoverClickTrigger.defaultProps = {
  autoClose: true
};
exports['default'] = PopoverClickTrigger;