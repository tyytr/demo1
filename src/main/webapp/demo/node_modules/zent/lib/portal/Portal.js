'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _util = require('./util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
  Portal的核心，只负责管理child。index.js实际export的不是这个component.
*/
var Portal = function (_ref) {
  (0, _inherits3['default'])(Portal, _ref);

  function Portal() {
    (0, _classCallCheck3['default'])(this, Portal);
    return (0, _possibleConstructorReturn3['default'])(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
  }

  (0, _createClass3['default'])(Portal, [{
    key: 'componentDidMount',


    // openPortal和closePortal之所以不暴露出去是因为这两个API的调用容易出BUG，有操作是异步的。
    value: function componentDidMount() {
      util.openPortal.call(this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      util.destroyPortal.call(this);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this2 = this;

      if (this.pendingDestroy) {
        // destroyPortal是异步的（原因看destroyPortal的代码），所以用callback的形式调用openPortal
        util.destroyPortal.call(this, function () {
          _this2.pendingDestroy = false;
          util.openPortal.call(_this2);
        });
      } else {
        util.openPortal.call(this);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // 如果selector变了的话，删除再重新打开
      var selector = this.props.selector;

      if (selector !== nextProps.selector) {
        // 真正的工作是在componentDidUpdate里做的
        this.pendingDestroy = true;
        return;
      }

      // 如果children变了，直接重新render, react会判断是否有更新（即使这个是root节点）。
      // 这个也是在componentDidUpdate里做的。

      // 其它情况仅更新样式
      var _props = this.props,
          className = _props.className,
          prefix = _props.prefix,
          css = _props.css;

      if (className !== nextProps.className || prefix !== nextProps.prefix || !(0, _isEqual2['default'])(css, nextProps.css)) {
        util.prepareNode(this.node, nextProps.prefix, nextProps.className, nextProps.css);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return Portal;
}(_react.PureComponent || _react.Component);

Portal.propTypes = {
  children: _propTypes2['default'].node.isRequired,
  selector: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].object]).isRequired,
  className: _propTypes2['default'].string,
  css: _propTypes2['default'].object,
  prefix: _propTypes2['default'].string
};
Portal.defaultProps = {
  selector: 'body',
  className: '',
  css: {},
  prefix: 'zent'
};
Portal.contextTypes = {
  zentI18n: _propTypes2['default'].object
};
exports['default'] = Portal;