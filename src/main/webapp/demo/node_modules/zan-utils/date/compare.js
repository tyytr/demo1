(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', './travel'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('./travel'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.travel);
    global.compare = mod.exports;
  }
})(this, function (module, exports, _travel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _travel2 = _interopRequireDefault(_travel);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  /**
   * 两个时间范围比较
   * @memberof module:date
   * @param {array} date 需要比较的时间，数组长度为2
   * @param {number} num 时间范围差
   * @param {enum} type 比较类型，day、month、year
   * @return {boolean} 穿越后的时间
   * @runkit true
   * @example
   * const compare = require('zan-utils/date/compare');
   * const travel = require('zan-utils/date/travel');
   * compare([new Date(), travel(-9, new Date())], 10)
   * // true 比较两个时间是否大于10天
   * compare([new Date(), travel(-29, new Date())], 1, 'month')
   * // true 比较两个时间是否在一个月内
   */
  function compare(date, num) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';

    var _date$sort = date.sort(function (a, b) {
      return a - b > 0;
    }),
        _date$sort2 = _slicedToArray(_date$sort, 2),
        start = _date$sort2[0],
        end = _date$sort2[1];

    return (0, _travel2['default'])(num, start, type) > end;
  }
  exports['default'] = compare;
  module.exports = exports['default'];
});