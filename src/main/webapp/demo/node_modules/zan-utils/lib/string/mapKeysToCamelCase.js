(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'lodash/reduce', 'lodash/isPlainObject', 'lodash/isArray', './toCamelCase'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('lodash/reduce'), require('lodash/isPlainObject'), require('lodash/isArray'), require('./toCamelCase'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.reduce, global.isPlainObject, global.isArray, global.toCamelCase);
    global.mapKeysToCamelCase = mod.exports;
  }
})(this, function (module, exports, _reduce, _isPlainObject, _isArray, _toCamelCase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reduce2 = _interopRequireDefault(_reduce);

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _isArray2 = _interopRequireDefault(_isArray);

  var _toCamelCase2 = _interopRequireDefault(_toCamelCase);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  /**
   * 将Object的key从下划线格式字符串转为驼峰格式
   * @memberof module:string
   * @param {object | array} value 待处理对象或数组
   * @param {boolean} deep 是否递归处理
   * @return {object | array} 处理后的对象或数组
   * @runkit true
   * @example
   * const mapKeysToCamelCase = require('zan-utils/string/mapKeysToCamelCase');
   * mapKeysToCamelCase({ yz_key: 1 })
   * // { yzKey: 1 }
   */
  function mapKeysToCamelCase(value) {
    var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var res = void 0;
    if ((0, _isArray2['default'])(value) && value.length > 0) {
      res = [];
    } else if ((0, _isPlainObject2['default'])(value) && Object.keys(value).length > 0) {
      res = {};
    } else {
      return value;
    }
    return (0, _reduce2['default'])(value, function (result, val, key) {
      if (deep) {
        val = mapKeysToCamelCase(val);
      }
      var newKey = typeof key === 'string' ? (0, _toCamelCase2['default'])(key) : key;
      result[newKey] = val;
      return result;
    }, res);
  }

  exports['default'] = mapKeysToCamelCase;
  module.exports = exports['default'];
});