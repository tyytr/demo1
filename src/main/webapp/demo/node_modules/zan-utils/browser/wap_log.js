(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'lodash/trim', '../url/args'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('lodash/trim'), require('../url/args'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.trim, global.args);
    global.wap_log = mod.exports;
  }
})(this, function (module, exports, _trim, _args) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _trim2 = _interopRequireDefault(_trim);

  var _args2 = _interopRequireDefault(_args);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var Logger = {};
  var win = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) ? window : {};
  var _global = win._global || {};
  _global.spm = _global.spm || {};

  var _getSpm = function () {
    var getLastSpm = function getLastSpm() {
      return _global.spm.logType + _global.spm.logId || 'fake' + _global.kdt_id;
    };
    return function () {
      var spm = _args2['default'].get('spm');
      spm = (0, _trim2['default'])(spm);
      if (spm !== '') {
        var arr = spm.split('_');
        if (arr.length > 2) {
          spm = arr[0] + '_' + arr[arr.length - 1];
        }
        spm += '_' + getLastSpm();
      } else {
        spm = getLastSpm();
      }
      return spm;
    };
  }();

  var _doLog = function _doLog(url, params) {
    var img = new Image();
    var random = Math.floor(Math.random() * 2147483648).toString(36);
    var key = 'log_' + random;
    var resolve = void 0;
    var promise = new Promise(function (res) {
      resolve = res;
    });

    // 这里一定要挂在window下
    // 在IE中，如果没挂在window下，这个img变量又正好被GC的话，img的请求会abort
    // 导致服务器收不到日志
    win[key] = img;

    img.onabort = function () {
      // 下面这句非常重要
      // 如果这个img很不幸正好加载了一个存在的资源，又是个gif动画
      // 则在gif动画播放过程中，img会多次触发onload
      // 因此一定要清空
      img.onload = img.onerror = img.onabort = null; //eslint-disable-line

      win[key] = null;

      // 下面这句非常重要
      // new Image创建的是DOM，DOM的事件中形成闭包环引用DOM是典型的内存泄露
      // 因此这里一定要置为null
      img = null;

      resolve();
    };

    img.onerror = img.onabort;
    img.onload = img.onabort;

    // 一定要在注册了事件之后再设置src
    // 不然如果图片是读缓存的话，会错过事件处理
    // 最后，对于url最好是添加客户端时间来防止缓存
    // 同时服务器也配合一下传递Cache-Control: no-cache;
    params.link = win.location.href;
    params.time = new Date().getTime();

    img.src = _args2['default'].add(url, params);
    // 设置1.5秒内发送请求
    win.setTimeout(resolve, 1500);

    return promise;
  };

  // 获取请求地址
  var getTarget = function getTarget(params) {
    var target = params.target || 'default';
    var tjHost = params.host || 'tj.youzan.com';
    var targetMap = {
      wxd: '//tj.youzan.com/fx.gif',
      wxdapp: '//app-tj.youzan.com/1.gif',
      'default': '//' + tjHost + '/1.gif',
      ua: '//tj.youzan.com/v1/ua'
    };
    return targetMap[target];
  };

  Logger.log = function (params, cb) {
    if (!params.spm) params.spm = Logger.getSpm(); // 补全日志spm
    if (!params.referer_url) params.referer_url = encodeURIComponent(document.referrer);
    if (!params.title) params.title = _global.title || (0, _trim2['default'])(document.title);
    var target = getTarget(params);
    delete params.target;
    delete params.host;

    return _doLog(target, params, cb);
  };

  Logger.getSpm = function () {
    if (!Logger.spm) Logger.spm = _getSpm();
    return Logger.spm;
  };
  win.Logger = Logger;
  var logs = win.__logs;
  if (logs && logs.length > 0) {
    logs.forEach(Logger.log);
  }
  exports['default'] = Logger;
  module.exports = exports['default'];
});