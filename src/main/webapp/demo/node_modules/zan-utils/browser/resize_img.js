(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'exif-js', './createObjectURL'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('exif-js'), require('./createObjectURL'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.exifJs, global.createObjectURL);
    global.resize_img = mod.exports;
  }
})(this, function (module, exports, _exifJs, _createObjectURL) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _exifJs2 = _interopRequireDefault(_exifJs);

  var _createObjectURL2 = _interopRequireDefault(_createObjectURL);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  /* eslint no-bitwise: 0 */
  function detectSubsampling(img) {
    var iw = img.naturalWidth,
        ih = img.naturalHeight;
    if (iw * ih > 1024 * 1024) {
      // subsampling may happen over megapixel image
      var canvas = document.createElement('canvas');
      canvas.width = 1;
      canvas.height = 1;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(img, -iw + 1, 0);
      // subsampled image becomes half smaller in rendering size.
      // check alpha channel value to confirm image is covering edge pixel or not.
      // if alpha value is 0 image is not covering, hence subsampled.
      return ctx.getImageData(0, 0, 1, 1).data[3] === 0;
    }
    return false;
  }

  function detectVerticalSquash(img, iw, ih) {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = ih;
    var ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);
    var data = ctx.getImageData(0, 0, 1, ih).data;
    // search image edge pixel position in case it is squashed vertically.
    var sy = 0;
    var ey = ih;
    var py = ih;
    while (py > sy) {
      var alpha = data[(py - 1) * 4 + 3];
      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }
      py = ey + sy >> 1;
    }
    var ratio = py / ih;
    return ratio === 0 ? 1 : ratio;
  }

  function transformCoordinate(canvas, ctx, width, height, orientation) {
    switch (orientation) {
      case 5:
      case 6:
      case 7:
      case 8:
        canvas.width = height;
        canvas.height = width;
        break;
      default:
        canvas.width = width;
        canvas.height = height;
    }
    switch (orientation) {
      case 2:
        // horizontal flip
        ctx.translate(width, 0);
        ctx.scale(-1, 1);
        break;
      case 3:
        // 180 rotate left
        ctx.translate(width, height);
        ctx.rotate(Math.PI);
        break;
      case 4:
        // vertical flip
        ctx.translate(0, height);
        ctx.scale(1, -1);
        break;
      case 5:
        // vertical flip + 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.scale(1, -1);
        break;
      case 6:
        // 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.translate(0, -height);
        break;
      case 7:
        // horizontal flip + 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.translate(width, -height);
        ctx.scale(-1, 1);
        break;
      case 8:
        // 90 rotate left
        ctx.rotate(-0.5 * Math.PI);
        ctx.translate(-width, 0);
        break;
      default:
        break;
    }
  }

  function renderImageToCanvas(img, canvas, options, doSquash) {
    var iw = img.naturalWidth,
        ih = img.naturalHeight;
    if (!(iw + ih)) return;
    var width = options.width,
        height = options.height;
    var ctx = canvas.getContext('2d');
    ctx.save();
    transformCoordinate(canvas, ctx, width, height, options.orientation);
    var subsampled = detectSubsampling(img);
    if (subsampled) {
      iw /= 2;
      ih /= 2;
    }
    var d = 1024; // size of tiling canvas
    var tmpCanvas = document.createElement('canvas');
    tmpCanvas.width = d;
    tmpCanvas.height = d;
    var tmpCtx = tmpCanvas.getContext('2d');
    var vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1;
    var dw = Math.ceil(d * width / iw);
    var dh = Math.ceil(d * height / ih / vertSquashRatio);
    var sy = 0;
    var dy = 0;
    while (sy < ih) {
      var sx = 0;
      var dx = 0;
      while (sx < iw) {
        tmpCtx.clearRect(0, 0, d, d);
        tmpCtx.drawImage(img, -sx, -sy);
        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);
        sx += d;
        dx += dw;
      }
      sy += d;
      dy += dh;
    }
    ctx.restore();
    tmpCanvas = null;
    tmpCtx = null;
  }

  function renderImageToDataURL(img, options, type, doSquash) {
    var canvas = document.createElement('canvas');
    renderImageToCanvas(img, canvas, options, doSquash);
    return canvas.toDataURL(type, options.quality || 0.8);
  }

  function dataURItoFile(dataURI, name, options) {
    var binary = atob(dataURI.split(',')[1]);
    var array = [];
    for (var i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }
    return new File([new Uint8Array(array)], name, options);
  }

  function getImgOptions(img, options) {
    var imgWidth = img.naturalWidth,
        imgHeight = img.naturalHeight;
    var width = options.width,
        height = options.height,
        maxWidth = options.maxWidth,
        maxHeight = options.maxHeight;

    if (width && !height) {
      height = imgHeight * width / imgWidth;
    } else if (height && !width) {
      width = imgWidth * height / imgHeight;
    } else if (!width && !height) {
      width = imgWidth;
      height = imgHeight;
    }
    if (maxWidth && width > maxWidth) {
      width = maxWidth;
      height = imgHeight * width / imgWidth;
    }
    if (maxHeight && height > maxHeight) {
      height = maxHeight;
      width = imgWidth * height / imgHeight;
    }
    return _extends({}, options, { width: width, height: height });
  }
  /**
   * @memberof module:browser
   * @name resize_img
   * @description
   * ###  js压缩图片
   * 1. 参数1： file，文件
   * 2. 参数2： options(Object)
   *   - width：指定宽度
   *   - height:指定高度（如果只指定一个，按照指定宽高按比例缩放）
   *   - maxWidth: 最大宽度
   *   - maxHeight: 最大高度
   *   - quality: 压缩质量，范围0-1，默认0.8
   * 3. 参数3：回调函数
   * @example
   * import resizeImg 'zan-utils/browser/resize_img';
   * // html
   * <input id="file" type="file">
   * <img id="resultImage">
   * // js
   * var eleFile = document.querySelector('#file');
   * var imgPreview = document.querySelector('#resultImage');
   * eleFile.addEventListener('change', function (event) {
   *  var file = event.target.files[0];
   *  if (file.type.indexOf("image") == 0) {
   *    resizeImg(file, {width: 640, quality: 0.5}, function (newFile) {
   *       imgPreview.src = URL.createObjectURL(newFile);
   *     })
   *  }
   * }
   *
  */
  var Blob = window.Blob || window.webkitBlob;
  function resizeImg(file, options, callback) {
    var type = file.type,
        name = file.name;

    var img = void 0;
    if (Blob && file instanceof Blob) {
      // file 转化为img
      img = new Image();
      img.src = (0, _createObjectURL2['default'])(file);
    }
    if (!img.naturalWidth && !img.naturalHeight) {
      img.onload = function () {
        _exifJs2['default'].getData(img, function () {
          var orientation = _exifJs2['default'].getTag(this, 'Orientation');
          // 图片加载后，获取尺寸
          if (orientation) {
            options.orientation = orientation;
          }
          var newOptions = getImgOptions(img, options);
          // 是否旋转
          var doSquash = !file || type === 'image/jpeg';
          // 将图片转化为canvas，再导出base64
          var dataURI = renderImageToDataURL(img, newOptions, type, doSquash);
          // dataURI重新转成file
          var newFile = dataURItoFile(dataURI, name, { type: type });
          callback(newFile);
        });
      };
    }
  }

  exports['default'] = resizeImg;
  module.exports = exports['default'];
});